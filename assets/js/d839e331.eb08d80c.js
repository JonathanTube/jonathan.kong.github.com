"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8832],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},h=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),u=i(n),p=o,g=u["".concat(c,".").concat(p)]||u[p]||d[p]||a;return n?r.createElement(g,s(s({ref:t},h),{},{components:n})):r.createElement(g,s({ref:t},h))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,s[1]=l;for(var i=2;i<a;i++)s[i]=n[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9648:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var r=n(7462),o=(n(7294),n(3905));const a={},s=void 0,l={unversionedId:"ES6/Classes",id:"ES6/Classes",title:"Classes",description:"Protopal Inheritance In ES5",source:"@site/docs/ES6/4.Classes.md",sourceDirName:"ES6",slug:"/ES6/Classes",permalink:"/docs/ES6/Classes",draft:!1,editUrl:"https://github.com/JonathanTube/Jonathan.Kong.github.com/tree/main/docs/ES6/4.Classes.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Arguments",permalink:"/docs/ES6/Arguments"},next:{title:"Destructuring",permalink:"/docs/ES6/Destructuring"}},c={},i=[{value:"Protopal Inheritance In ES5",id:"protopal-inheritance-in-es5",level:2},{value:"Inheritance in ES6",id:"inheritance-in-es6",level:2},{value:"Super keyword in a Class",id:"super-keyword-in-a-class",level:2},{value:"Shadowing \u906e\u853d,\u7c7b\u4f3cjava\u4e2d\u7684\u65b9\u6cd5\u8986\u76d6(overwrite)",id:"shadowing-\u906e\u853d\u7c7b\u4f3cjava\u4e2d\u7684\u65b9\u6cd5\u8986\u76d6overwrite",level:2},{value:"Abstract Class",id:"abstract-class",level:2},{value:"get and set methods",id:"get-and-set-methods",level:2},{value:"Static Methods",id:"static-methods",level:2}],h={toc:i},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"protopal-inheritance-in-es5"},"Protopal Inheritance In ES5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"\nfunction Shape( color ) {\n    this.color = color;\n\n    // It doesn't work\n    // function fetchColor() {\n    //     return this.color\n    // }\n}\n\n// binding method to class Shape via prototype\nShape.prototype.getColor = function() {\n    return this.color;\n}\n\nlet shape = new Shape('red')\nconsole.log(shape) // out put is : Shape { color: 'red' }\n// It doesn't work\n// console.log(shape.fetchColor())\n\nfunction Rectangle( color, width, height ) {\n    Shape.call( this, color );\n    this.width = width;\n    this.height = height;\n};\n\n// A little strange!\nRectangle.prototype = Object.create( Shape.prototype );\nRectangle.prototype.constructor = Rectangle;\n\nRectangle.prototype.getArea = function() {\n    return this.width * this.height;\n};\n\nlet rectangle = new Rectangle( 'red', 5, 8 );\nconsole.log( rectangle.getArea() ); // output : 40\nconsole.log( rectangle.getColor() );// output : red\nconsole.log( rectangle.toString() ); // output : [object Object]\nconsole.log( rectangle ); // output : Rectangle { color: 'red', width: 5, height: 8 }\n")),(0,o.kt)("h2",{id:"inheritance-in-es6"},"Inheritance in ES6"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// Define the super class\nclass Shape {\n    constructor(color) {\n        this.color = color\n    }\n\n    getColor() {\n        return this.color\n    }\n}\n\n// Subclass extends the super class\nclass Rectangle extends Shape {\n    constructor(color, width, height) {\n        super(color) // invoke the super class constructor method.\n        this.width = width\n        this.height = height\n    }\n\n    // define a new method\n    getArea() {\n        return this.width * this.height\n    }\n}\n\nlet rectangle = new Rectangle( \'red\', 5, 8 );\nconsole.log( "Area:\\t\\t" + rectangle.getArea() )\n// The sub class can also inovke the method which extends from the super class.\nconsole.log( "Color:\\t\\t" + rectangle.getColor() )\nconsole.log( "toString:\\t" + rectangle.toString() )\n')),(0,o.kt)("h2",{id:"super-keyword-in-a-class"},"Super keyword in a Class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class A {\n    constructor() {\n        console.log( 'A' ); \n    } \n}\n\nclass B extends A {\n    constructor() {\n        // Call super as the first thing in a constructor of a class defined with extends.\n        // otherwise you will get an error when you initiate B.\n        super() \n        console.log( 'B' )\n    } \n}\n\nnew B() // It will ouput A and B.\n\nconsole.log('----------------------')\n\nclass C extends A {\n    // If you don\u2019t define a constructor in a class defined with extends, \n    // one will automatically be created for you, calling super with the argument list of the constructor.\n} \n\nnew C() // so the output is A from Class A\n\nC.constructor // nothing will happen because the constructor in C don't do anything.\n")),(0,o.kt)("h2",{id:"shadowing-\u906e\u853d\u7c7b\u4f3cjava\u4e2d\u7684\u65b9\u6cd5\u8986\u76d6overwrite"},"Shadowing \u906e\u853d,\u7c7b\u4f3cjava\u4e2d\u7684\u65b9\u6cd5\u8986\u76d6(overwrite)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class User {\n    constructor() {\n        this.name = 'man'\n    }\n    getName() {\n        return this.name\n    }\n}\n\nclass SuperUser extends User {\n    getName() {\n        return 'super' + this.name\n    }\n}\n\nvar su = new SuperUser()\nlet result = su.getName()\nconsole.log(result) // The ouput will be superman\n")),(0,o.kt)("h2",{id:"abstract-class"},"Abstract Class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class ChartView {\n    constructor( /* ... */ ) {\n        // The built-in property new.target contains a reference to the class written next to the new keyword during instantiation.\n        if ( new.target === ChartView ) {\n            throw new Error('Abstract class ChartView cannot be instantiated.');\n        }\n        // ...\n    }\n    // ...\n}\n")),(0,o.kt)("h2",{id:"get-and-set-methods"},"get and set methods"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class Square {\n    constructor( width ) { this.width = width; }\n    get height() {\n        console.log( 'get height' );\n        return this.width;\n    }\n    set height( h ) {\n        console.log( 'set height', h );\n        this.width = h;\n    }\n    get area() { \n        console.log( 'get area' );\n        return this.width * this.height;\n    }    \n}\n\nlet square = new Square( 5 );\nsquare.height = 99 // set method will be invoked.\nconsole.log(square.height) // get method will be invoked.\n")),(0,o.kt)("h2",{id:"static-methods"},"Static Methods"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"class C {\n    static create() {\n        return new C()\n    }\n    constructor() {\n        console.log( 'Accessing constructor from the class')\n    }\n}\n\n// Static methods are operations defined on a class. These methods can only be referenced from the class itself, not from objects.\n// and after the create was invoked, it's constructor method was also invoked.\nvar c = C.create()\n\n//this will give an error\nc.create()\n")))}d.isMDXComponent=!0}}]);