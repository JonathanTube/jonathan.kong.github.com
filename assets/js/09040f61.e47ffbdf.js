"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[545],{3905:(e,t,n)=>{n.d(t,{Zo:()=>o,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),d=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},o=function(e){var t=d(e.components);return a.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),p=d(n),c=r,h=p["".concat(u,".").concat(c)]||p[c]||m[c]||i;return n?a.createElement(h,l(l({ref:t},o),{},{components:n})):a.createElement(h,l({ref:t},o))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8342:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={},l="Divide and Conquer & Recursion",s={unversionedId:"leetcode/divide and conquer",id:"leetcode/divide and conquer",title:"Divide and Conquer & Recursion",description:"704. Binary Search",source:"@site/docs/leetcode/5.divide and conquer.md",sourceDirName:"leetcode",slug:"/leetcode/divide and conquer",permalink:"/docs/leetcode/divide and conquer",draft:!1,editUrl:"https://github.com/JonathanTube/Jonathan.Kong.github.com/tree/main/docs/leetcode/5.divide and conquer.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Stack",permalink:"/docs/leetcode/stack"},next:{title:"DFS&BSF",permalink:"/docs/leetcode/dfs&bsf"}},u={},d=[{value:"704. Binary Search",id:"704-binary-search",level:2},{value:"50. Pow(x, n)",id:"50-powx-n",level:2},{value:"206. Reverse Linked List",id:"206-reverse-linked-list",level:2},{value:"24. Swap Nodes in Pairs",id:"24-swap-nodes-in-pairs",level:2},{value:"21. Merge Two Sorted Lists",id:"21-merge-two-sorted-lists",level:2},{value:"23. Merge k Sorted Lists",id:"23-merge-k-sorted-lists",level:2},{value:"53. Maximum Subarray",id:"53-maximum-subarray",level:2}],o={toc:d},p="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(p,(0,a.Z)({},o,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"divide-and-conquer--recursion"},"Divide and Conquer & Recursion"),(0,r.kt)("h2",{id:"704-binary-search"},"704. Binary Search"),(0,r.kt)("p",null,"Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\nYou must write an algorithm with O(log n) runtime complexity."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example 1:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Input: nums = ","[-1,0,3,5,9,12]",", target = 9"),(0,r.kt)("li",{parentName:"ul"},"Output: 4"),(0,r.kt)("li",{parentName:"ul"},"Explanation: 9 exists in nums and its index is 4"))),(0,r.kt)("li",{parentName:"ul"},"Example 2:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Input: nums = ","[-1,0,3,5,9,12]",", target = 2"),(0,r.kt)("li",{parentName:"ul"},"Output: -1"),(0,r.kt)("li",{parentName:"ul"},"Explanation: 2 does not exist in nums so return -1")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="\u8fed\u4ee3"',title:'"\u8fed\u4ee3"'},"class Solution {\n    public int search(int[] nums, int target) {\n        // \u786e\u5b9a\u533a\u95f4\uff1a\u662f\u5de6\u95ed\u53f3\u95ed\n        int left = 0;\n        int right = nums.length - 1; // \u8fd9\u91cc\u8bb0\u5f97\u51cf\u4e00\n        while(left <= right) {\n            // left = 0; right = 5; \n            // mid = (5 - 0) / 2 = (right - left) / 2 = 2;\n            \n            // left = 2; right = 5; \n            // mid = 2 + (5 - 2) / 2 = left + (right - left) / 2 = 3;\n            // \u6c42\u4e2d\u95f4\u4f4d\u7f6e\uff0c\u8868\u8fbe\u5f0f\n            int mid = left + (right - left) / 2;\n            // \u4e5f\u53ef\u4ee5\u8fd9\u6837\u5199\n            // int mid = (left + right) / 2;\n            // 1-2-3-4-5; mid = 3\n            if(nums[mid] > target) { // \u76ee\u6807\u503c\u5728mid\u5de6\u8fb9\n                right = mid - 1; // \u6240\u4ee5\u8fd9\u91cc\u8981\u51cf\u4e00\uff0c\u5df2\u7ecf\u4e0d\u80fd\u5305\u542bmid\u4e86\n            } else if(nums[mid] < target) { // \u76ee\u6807\u503c\u5728mid\u53f3\u8fb9\n                left = mid + 1;// \u6240\u4ee5\u8fd9\u91cc\u8981\u52a0\u4e00\uff0c\u5df2\u7ecf\u4e0d\u80fd\u5305\u542bmid\u4e86\n            } else {\n                return mid;\n            }\n        }\n        return -1;\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff0c\u5199\u6cd5"',title:'"\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff0c\u5199\u6cd5"'},"class Solution {\n    public int search(int[] nums, int target) {\n        int startIndex = 0;\n        int endIndex = nums.length;\n        while(startIndex < endIndex) {\n            int midIndex = (startIndex + endIndex) / 2;\n            if(target > nums[midIndex]) startIndex = midIndex + 1;\n            else if(target < nums[midIndex]) endIndex = midIndex;\n            else return midIndex;\n        }\n        return -1;\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="\u9012\u5f52"',title:'"\u9012\u5f52"'}," class Solution {\n    public int search(int[] nums, int target) {\n        // length - 1\uff0c\u4e0d\u7136\u5c31\u9519\u4e86\n        return search(nums, 0, nums.length - 1, target);\n    }\n\n    private int search(int[] nums, int left, int right, int target) {\n        // \u9012\u5f52\u4ec0\u4e48\u65f6\u5019\u7ed3\u675f\uff1f\n        if(left > right) return -1;\n        // int mid = left + (right - left) / 2;\n        // \u4e5f\u53ef\u4ee5\u8fd9\u6837\u5199\n        int mid = (left + right) / 2;\n        if(nums[mid] > target) return search(nums, left, mid - 1, target);\n        if(nums[mid] < target) return search(nums, mid + 1, right, target);\n        return mid;\n    }\n}\n")),(0,r.kt)("h2",{id:"50-powx-n"},"50. Pow(x, n)"),(0,r.kt)("p",null,"Implement pow(x, n), which calculates x raised to the power n (i.e., x(n))."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example 1: Input: x = 2.00000, n = 10 Output: 1024.00000"),(0,r.kt)("li",{parentName:"ul"},"Example 2: Input: x = 2.10000, n = 3 Output: 9.26100"),(0,r.kt)("li",{parentName:"ul"},"Example 3: Input: x = 2.00000, n = -2 Output: 0.25000 Explanation: 2(-2) = 1/2(2) = 1/4 = 0.25")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public double myPow(double x, int n) {\n        // \u5982\u679cn\u662f\u8d1f\u6570\uff0c\u8f6c\u6362\u4e3a\u6b63\u6570\u6267\u884c\uff0c1.0 \u9664\u4ee5\u7ed3\u679c\uff0c\u5f97\u5230\u8d1f\u6570\u7ed3\u679c\n        return n >= 0 ? quickMul(x, n) : 1.0 / quickMul(x, -n);\n    }\n\n    public double quickMul(double x, int n) {\n        // \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if (n == 0) return 1.0;\n        // \u8fd9\u91cc\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\n        double y = quickMul(x, n / 2);\n        // \u5982\u679cn\u662f\u5076\u6570\uff0cy * y; \u5982\u679c\u662f\u5947\u6570\u90a3\u5c31\u662f\u518d\u4e58\u4ee5x\u672c\u8eab\n        return n % 2 == 0 ? y * y : y * y * x;\n    }\n}\n")),(0,r.kt)("h2",{id:"206-reverse-linked-list"},"206. Reverse Linked List"),(0,r.kt)("p",null,"Given the head of a singly linked list, reverse the list, and return the reversed list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public ListNode reverseList(ListNode head) {\n        // \u5982\u679c\u8282\u70b9\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56de\n        // \u5982\u679c\u8282\u70b9\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff1a\u5982\u679chead.next == null \u5c31\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\n        if(head == null || head.next == null) return head;\n        ListNode newHead = reverseList(head.next);\n        // \u8fd9\u91cc\u5f00\u59cb\u51fa\u6808\uff0c\u65e2\u7136\u5f53\u524dnewHead\u662f\u6700\u540e\u8863\u4e00\u4e2a\u8282\u70b9\n        // \u90a3\u4f20\u5165\u7684head\u8282\u70b9\u5c31\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\n        head.next.next = head; // \u672b\u5c3e\u8282\u70b9\u6307\u5411\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\n        head.next = null; // \u5bfc\u51fa\u7b2c\u4e8c\u4e2a\u8282\u70b9\u6307\u5411null\n        // \u6bcf\u6b21\u9012\u5f52\u56de\u6eaf\u540enewHead\u59cb\u7ec8\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6240\u4ee5\u76f4\u63a5\u8fd4\u56de\n        return newHead;\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="another explaination"',title:'"another','explaination"':!0},"class Solution {\n    public ListNode reverseList(ListNode head) {\n        // \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\n        if(head == null) return head;\n        if(head.next == null) return head;\n        // \u5927\u95ee\u9898\u5904\u7406\u4e3a\u5c0f\u95ee\u9898\n        // \u5047\u8bbe\u94fe\u88681->2->3->4\u4e2d\uff0c2->3-4\u5df2\u7ecf\u5012\u8f6c\u597d\n        // \u72b6\u6001\u5982\uff1a1->2<-3<-4<-newHead;\n        //        ^  |\n        //        |__|\n        ListNode newHead = reverseList(head.next);\n        // \u53ea\u9700\u8981\u5c06\u5f53\u524d\u8282\u70b9(1)\u4e0e(2)\u5904\u7406\u4e00\u4e0b\n        head.next.next = head; // 2\u6307\u54111\n        head.next = null; // 1\u6307\u5411\u7a7a\n        return newHead;\n    }\n}\n")),(0,r.kt)("h2",{id:"24-swap-nodes-in-pairs"},"24. Swap Nodes in Pairs"),(0,r.kt)("p",null,"Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example 1:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Input: head = ","[1,2,3,4]"," Output: ","[2,1,4,3]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("img",{alt:"Locale Dropdown",src:n(8017).Z,width:"422",height:"222"})))),(0,r.kt)("li",{parentName:"ul"},"Example 2: Input: head = [] Output: []"),(0,r.kt)("li",{parentName:"ul"},"Example 3: Input: head = ","[1]"," Output: ","[1]"),(0,r.kt)("li",{parentName:"ul"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public ListNode swapPairs(ListNode head) {\n        if(head == null || head.next == null) return head;\n        // 1->2->3->4\uff1b\n        // \u5927\u95ee\u9898\u62c6\u89e3\u4e3a\u5c0f\u95ee\u9898\uff0c\u5047\u8bbe\u8981\u5904\u74061,2\u540e\u9762\u76843->4\u88ab\u5904\u7406\u597d\n        // \u8981\u5904\u7406\u7684\u95ee\u9898\u5c31\u662f\u524d\u4e24\u4e2a\u8282\u70b9\u4e0e\u540e\u9762\u5904\u7406\u597d\u7684\u8282\u70b9\u7684\u5173\u7cfb\n        // head = 1; next = 2\n        ListNode next = head.next;\n        // \u5904\u74062\u540e\u9762\u7684\u94fe\u8868\uff1a3 -> 4\n        // temp = 4->3\n        ListNode temp = swapPairs(next.next);\n        // 1\u6307\u5411 4->3 => 1 -> 4 -> 3\n        head.next = temp;\n        // 2 \u6307\u54111 => 2 -> 1 -> 4 -> 3\n        next.next = head;\n        // \u8fd4\u56de2\uff1a2 -> 1 -> 4 -> 3\n        return next;\n    }\n}\n")),(0,r.kt)("h2",{id:"21-merge-two-sorted-lists"},"21. Merge Two Sorted Lists"),(0,r.kt)("p",null,"You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Example 1: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Input: list1 = ","[1,2,4]",", list2 = ","[1,3,4]"," Output: ","[1,1,2,3,4,4]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("img",{alt:"Locale Dropdown",src:n(5625).Z,width:"662",height:"302"})))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Example 2: Input: list1 = [], list2 = [] Output: []")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Example 3: Input: list1 = [], list2 = ","[0]"," Output: ","[0]"))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Locale Dropdown",src:n(3463).Z,width:"1046",height:"560"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        if(list1 == null) return list2; // \u53d6\u4e0d\u4e3a\u7a7a\u7684\u76f4\u63a5\u8fd4\u56de\n        if(list2 == null) return list1; // \u53d6\u4e0d\u4e3a\u7a7a\u7684\u76f4\u63a5\u8fd4\u56de\n        // \u6bcf\u6b21\u53d6\u6bd4\u8f83\u540e\uff0c\u8282\u70b9\u8f83\u5c0f\u7684\u8282\u70b9\u8fd4\u56de\n        // \u7136\u540e\u8f83\u5c0f\u8282\u70b9\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u4e0e\u5269\u4f59\u53e6\u4e00\u4e2a\u94fe\u8868\u8282\u70b9\u505a\u5904\u7406\n        if(list1.val < list2.val) {\n            list1.next = mergeTwoLists(list1.next, list2);\n            return list1;\n        } else {\n            list2.next = mergeTwoLists(list1, list2.next);\n            return list2;\n        }\n    }\n}\n")),(0,r.kt)("h2",{id:"23-merge-k-sorted-lists"},"23. Merge k Sorted Lists"),(0,r.kt)("p",null,"TODO\n\u5251\u6307 Offer 51. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 LCOF\nTODO\n\u5f52\u5e76\u6392\u5e8f\nTODO"),(0,r.kt)("h2",{id:"53-maximum-subarray"},"53. Maximum Subarray"),(0,r.kt)("p",null,"Given an integer array nums, find the subarray with the largest sum, and return its sum."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Example 1:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Input: nums = ","[-2,1,-3,4,-1,2,1,-5,4]"),(0,r.kt)("li",{parentName:"ul"},"Output: 6"),(0,r.kt)("li",{parentName:"ul"},"Explanation: The subarray ","[4,-1,2,1]"," has the largest sum 6."))),(0,r.kt)("li",{parentName:"ul"},"Example 2:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Input: nums = ","[1]"),(0,r.kt)("li",{parentName:"ul"},"Output: 1"),(0,r.kt)("li",{parentName:"ul"},"Explanation: The subarray ","[1]"," has the largest sum 1."))),(0,r.kt)("li",{parentName:"ul"},"Example 3:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Input: nums = ","[5,4,-1,7,8]"),(0,r.kt)("li",{parentName:"ul"},"Output: 23"),(0,r.kt)("li",{parentName:"ul"},"Explanation: The subarray ","[5,4,-1,7,8]"," has the largest sum 23.")))))}m.isMDXComponent=!0},5625:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/1123123123123-f9b10f020cbf664d270bd45cd389fcc6.JPEG"},8017:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/bdc64be4-1dc9-486a-a775-6b33777dcfa4-7759d7598b82a187ca09655e474c7ff8.jpg"},3463:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/fadc2417-f18d-4c4d-b0b1-feb44d9c9d04-39e7cc5bfed612f03d9aeb29bf7a74f2.png"}}]);