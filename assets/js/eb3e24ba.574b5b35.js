"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1099],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},o="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),o=c(t),k=i,h=o["".concat(l,".").concat(k)]||o[k]||m[k]||r;return t?a.createElement(h,s(s({ref:n},p),{},{components:t})):a.createElement(h,s({ref:n},p))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=k;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u[o]="string"==typeof e?e:i,s[1]=u;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},2023:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>u,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const r={},s="Stack",u={unversionedId:"leetcode/stack",id:"leetcode/stack",title:"Stack",description:"232. Implement Queue using Stacks",source:"@site/docs/leetcode/4.stack.md",sourceDirName:"leetcode",slug:"/leetcode/stack",permalink:"/docs/leetcode/stack",draft:!1,editUrl:"https://github.com/JonathanTube/jonathantube.github.com/tree/main/docs/leetcode/4.stack.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Queue",permalink:"/docs/leetcode/queue"},next:{title:"Divide and Conquer & Recursion",permalink:"/docs/leetcode/divide and conquer"}},l={},c=[{value:"232. Implement Queue using Stacks",id:"232-implement-queue-using-stacks",level:2},{value:"225. Implement Stack using Queues",id:"225-implement-stack-using-queues",level:2},{value:"20. Valid Parentheses",id:"20-valid-parentheses",level:2},{value:"856. Score of Parentheses",id:"856-score-of-parentheses",level:2},{value:"227. Basic Calculator II",id:"227-basic-calculator-ii",level:2},{value:"155. Min Stack",id:"155-min-stack",level:2},{value:"496. Next Greater Element I",id:"496-next-greater-element-i",level:2},{value:"901. Online Stock Span",id:"901-online-stock-span",level:2}],p={toc:c},o="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(o,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"stack"},"Stack"),(0,i.kt)("h2",{id:"232-implement-queue-using-stacks"},"232. Implement Queue using Stacks"),(0,i.kt)("p",null,"Implement a first in first out (FIFO) queue using only two stacks."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class MyQueue {\n    // \u521d\u59cb\u5316\u5165\u53e3\n    private Stack<Integer> inStack = new Stack<>();\n    // \u521d\u59cb\u5316\u51fa\u53e3\n    private Stack<Integer> outStack = new Stack<>();\n\n    public MyQueue() {\n\n    }\n    \n    public void push(int x) {\n        inStack.push(x);\n    }\n    \n    public int pop() {\n        if(empty()) return -1;\n        if(outStack.isEmpty()) {\n            // \u5982\u679c\u51fa\u53e3\u6ca1\u6709\u6570\u636e\uff0c\u4f46\u662f\u5165\u53e3\u6709\u6570\u636e\n            // \u9700\u8981\u5165\u53e3\u7684\u6570\u636e\u53cd\u8f6c\u5230\u51fa\u53e3\uff0c\n            // \u90a3\u51fa\u53e3\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u76f8\u5bf9\u6700\u5148\u52a0\u5165\u7684\u5143\u7d20\uff0c\u4e5f\u5c31\u662f\u961f\u5934\n            while(!inStack.isEmpty()) outStack.push(inStack.pop());\n        }\n        return outStack.pop();\n    }\n    \n    public int peek() {\n        if(empty()) return - 1;\n        if(outStack.isEmpty()) {\n            while(!inStack.isEmpty()) outStack.push(inStack.pop());\n        }\n        return outStack.peek();\n    }\n    \n    public boolean empty() {\n        // \u5982\u679c\u5165\u53e3\u548c\u51fa\u53e3\u90fd\u6ca1\u6709\u5143\u7d20\uff0c\u90a3\u5c31\u7a7a\u4e86\n        return inStack.isEmpty() && outStack.isEmpty();\n    }\n}\n")),(0,i.kt)("h2",{id:"225-implement-stack-using-queues"},"225. Implement Stack using Queues"),(0,i.kt)("p",null,"Implement a last-in-first-out (LIFO) stack using only two queues"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class MyStack {\n    private Queue<Integer> inQueue = new LinkedList<>();\n    private int size; // **\u8fd9\u91cc\u662f\u5173\u952e\uff0c\u8981\u8bb0\u5f55\u5927\u5c0f\uff0c\u4e0d\u7136\u6ca1\u6709size - 1\u53ef\u7528\n\n    public MyStack() {}\n    \n    public void push(int x) {\n        inQueue.offer(x);\n        size ++;\n    }\n    \n    /**\n     * \u5982\u4f55\u62ff\u5230\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff1f\n     */\n    public int pop() {\n        if(empty()) return -1;\n        // \u65b0\u5efa\u4e00\u4e2a\u4e34\u65f6\u961f\u5217\uff0c\u4fdd\u5b58\u6570\u636e\n        Queue<Integer> tempQueue = new LinkedList<>();\n        for(int i = 0; i < size - 1; i++) {\n            // \u5c06\u961f\u5217\u5f39\u51fasize - 1\u4e2a\u5143\u7d20\uff0c\u4f9d\u6b21\u52a0\u5165\u4e34\u65f6\u961f\u5217\n            // \u5269\u4e0b\u7684\u4e00\u4e2a\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5bf9\u5e94\u6808\u9876\n            tempQueue.offer(inQueue.poll());\n        }\n        int result = inQueue.poll();\n        // \u8fd9\u91cc\u9700\u8981\u518d\u6b21\u5c06\u51fa\u961f\u7684\u6570\u503c\u4ecetempQueue\u4e2d\u518d\u52a0\u56de\u53bb\n        inQueue = tempQueue; // \u5c06\u4e34\u65f6\u961f\u5217\u91cd\u65b0\u6307\u5411\u7ed9inQueue\n        size --; // \u8bb0\u5f97\u51cf\u5c11\u6570\u91cf\n        return result;\n    }\n    \n    public int top() {\n        if(empty()) return -1;\n        int result = pop();\n        push(result); // \u7528\u5b8c\u8bb0\u5f97\u8981\u52a0\u56de\u53bb\n        return result;\n    }\n    \n    public boolean empty() {\n        return size == 0;\n    }\n}\n")),(0,i.kt)("h2",{id:"20-valid-parentheses"},"20. Valid Parentheses"),(0,i.kt)("p",null,"Given a string s containing just the characters '(', ')', '{', '}', '","[' and ']","', determine if the input string is valid.\nAn input string is valid if:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Open brackets must be closed by the same type of brackets."),(0,i.kt)("li",{parentName:"ol"},"Open brackets must be closed in the correct order."),(0,i.kt)("li",{parentName:"ol"},"Every close bracket has a corresponding open bracket of the same type.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean isValid(String s) {\n        // \u5982\u679c\u957f\u5ea6\u662f\u5947\u6570\uff0c\u76f4\u63a5\u4e0d\u6ee1\u4f4f\n        if(s.length() % 2 == 1) return false;\n        // \u65b0\u5efastack; character\u800c\u4e0d\u662fcharactor!!!\n        Stack<Character> stack = new Stack<>();\n        // \u8f6c\u6362\u4e3a\u5b57\u7b26\u6570\u7ec4\n        char[] chars = s.toCharArray();\n        for(char c : chars) {\n            // \u5982\u679c\u653e\u5165\u7684\u662f\u6b63\u62ec\u53f7\uff0c\u76f4\u63a5\u653e\u5165\u5176\u53cd\u62ec\u53f7\uff0c\u4fbf\u4e8e\u540e\u7eed\u6bd4\u8f83\n            if(c == '(') {\n                stack.push(')');\n                continue;\n            }\n            if(c == '{') {\n                stack.push('}');\n                continue;\n            }\n            if(c == '[') {\n                stack.push(']');\n                continue;\n            }\n            // \u5982\u679c\u8fd8\u6709\u5b57\u7b26\uff0c\u53c8\u662f\u53cd\u62ec\u53f7\uff0c\u4f46\u662f\u6808\u4e2d\u5df2\u7ecf\u7a7a\u4e86\uff0c\n            // \u6ca1\u6709\u6b63\u62ec\u53f7\u4e86\uff0c\u8bf4\u660e\u80af\u5b9a\u4e0d\u5408\u6cd5\n            if(stack.isEmpty()) return false;\n            // \u5f39\u51fa\u6808\u9876\u7b26\u53f7\u5982\u679c\u4e0d\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56defalse\n            if(stack.pop() != c) return false;\n        }\n        // \u6700\u7ec8\u62ec\u53f7\u80af\u5b9a\u90fd\u662f\u8981\u5339\u914d\u6d88\u9664\u7684\uff0c\u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u8bf4\u660e\u672a\u5b8c\u5168\u5339\u914d\n        return stack.isEmpty();\n    }\n}\n")),(0,i.kt)("h1",{id:"921-minimum-add-to-make-parentheses-valid"},"921. Minimum Add to Make Parentheses Valid"),(0,i.kt)("p",null,"A parentheses string is valid if and only if:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It is the empty string,"),(0,i.kt)("li",{parentName:"ul"},"It can be written as AB (A concatenated with B), where A and B are valid strings, or"),(0,i.kt)("li",{parentName:"ul"},"It can be written as (A), where A is a valid string.\nYou are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string."),(0,i.kt)("li",{parentName:"ul"},'For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".\nReturn the minimum number of moves required to make s valid.\nExample 1: Input: s = "())"  Output: 1\nExample 2:  Input: s = "(((" Output: 3')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    /**\n    * \u4f7f\u7528\u6808\u7684\u89e3\u6cd5\n    */\n    public int minAddToMakeValid(String s) {\n        int len = s.length();\n        if(len == 0) return 0;\n\n        Stack<Character> myStack = new Stack<>();\n        // \u4e3e\u4f8b\uff1a\n        // ()); 1-> ['(']; 2-> ['(', ')'] => []; 3-> [')']\n        // \"(((\" 1-> ['(']; 2-> ['((']; 3-> ['(((']\n        // \u603b\u7ed3\uff1a\u4e0d\u505c\u5f80\u6808\u4e2d\u4e22\uff0c\u5982\u679c\u5de6\u62ec\u53f7\u548c\u6709\u62ec\u53f7\u5339\u914d\uff0c\u51fa\u6808\uff1b\u5426\u5219\u5165\u6808\n        for (int i = 0; i < len; i++) {\n            Character c = s.charAt(i);\n            if(myStack.isEmpty()) {\n                myStack.push(c);\n                continue;\n            }\n            if(myStack.peek() == '(' && c == ')') {\n                myStack.pop();\n                continue;\n            }\n            myStack.push(c);\n        }\n\n        return myStack.size();\n    }\n}\n")),(0,i.kt)("p",null,"\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/minimum-add-to-make-parentheses-valid/solutions/1622340/by-cheungq-6-5zkx/"},"https://leetcode.cn/problems/minimum-add-to-make-parentheses-valid/solutions/1622340/by-cheungq-6-5zkx/")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    /**\n     * \u8fd9\u91cc\u4e0d\u9700\u8981\u7528\u5230\u6808\uff0c\u6240\u4ee5\u66f4\u5feb\n     */\n    public int minAddToMakeValid(String s) {\n        int leftSize = 0; // \u5de6\u62ec\u53f7\u4e0d\u5339\u914d\u6570\u91cf\n        int rightSize = 0; // \u53f3\u62ec\u53f7\u4e0d\u5339\u914d\u6570\u91cf\n        for(int i = 0; i < s.length(); i ++) {\n            char c = s.charAt(i);\n            // \u9047\u5230\u5de6\u62ec\u53f7\uff1aleftSize + 1\n            if(c == '(') {\n                leftSize ++;\n                continue;\n            }\n            // \u9047\u5230\u53f3\u62ec\u53f7\uff0c\u53f3\u62ec\u53f7\u53bb\u6d88\u9664\u5de6\u62ec\u53f7\u7684\u6570\u91cf\n            // \u8fd9\u91cc\u6709\u4e2a\u601d\u8003\u7684\u5730\u65b9\uff0c\u4e3a\u4ec0\u4e48\u5de6\u62ec\u53f7\u6570\u91cf\u5927\u4e8e0\uff0c\u5c31\u53ef\u4ee5\u51cf\u53bb\u5de6\u62ec\u53f7\u7684\u6570\u91cf\uff0c\n            // \u5982\u679c\u4e0a\u4e00\u4e2a\u5b57\u7b26\u4e5f\u662f\u53f3\u62ec\u53f7\u5462\uff1f\u4e0d\u5c31\u4e0d\u80fd\u51cf\u4e86\n            // \u95ee\u9898\u662f\u4e0a\u4e00\u4e2a\u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u90a3\u4e0a\u4e00\u4e2a\u62ec\u53f7\u5e94\u8be5\u4e5f\u5224\u65ad\u4e86\n            // \u4e5f\u5c31\u662f\u6709\u6ca1\u6709\u5de6\u62ec\u53f7\u5927\u4e8e0\uff0c\u4f46\u662f\u4e0a\u4e00\u4e2a\u62ec\u53f7\u662f\u53f3\u62ec\u53f7\u7684\u60c5\u51b5\n            // => ((() <= ')'? \u4e0d\u53ef\u80fd\uff0c\u4e0a\u4e00\u4e2a\u62ec\u53f7\u4f1a\u6d88\u6389\u5de6\u62ec\u53f7\n            if(c == ')') {\n                if(leftSize > 0) leftSize --; // \u5982\u679c\u672a\u5339\u914d\u5de6\u62ec\u53f7\u5927\u4e8e0\uff1b\u6d88\u6389\n                else rightSize ++; // \u5426\u5219\u53f3\u62ec\u53f7\u4e0d\u5339\u914d\u6570\u91cf+1\n            }\n        }\n        return leftSize + rightSize; // \u5de6\u53f3\u62ec\u53f7\u4e0d\u5339\u914d\u7684\u6570\u91cf\u548c\n    }\n}\n")),(0,i.kt)("h2",{id:"856-score-of-parentheses"},"856. Score of Parentheses"),(0,i.kt)("p",null,"Given a balanced parentheses string s, return the score of the string.\nThe score of a balanced parentheses string is based on the following rule:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"()" has score 1.'),(0,i.kt)("li",{parentName:"ul"},"AB has score A + B, where A and B are balanced parentheses strings."),(0,i.kt)("li",{parentName:"ul"},'(A) has score 2 * A, where A is a balanced parentheses string.\nExample 1: Input: s = "()" Output: 1\nExample 2: Input: s = "(())" Output: 2\nExample 3: Input: s = "()()" Output: 2')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int scoreOfParentheses(String s) {\n        // \u6838\u5fc3\u662f\u8ba1\u7b97\u5b8c\u540e\uff0c\u518d\u628a\u7ed3\u679c\u4e22\u5230\u6808\u91cc\n        // \u5171\u6709\uff0c3\u79cd\u60c5\u51b5\n        // () = 1  \u76f4\u63a5\u5339\u914d\n        // (()) = (1) = 2 * 1  \u5d4c\u5957\u5339\u914d\n        // ()() = 1 + 1 = 2    \u975e\u5d4c\u5957\u5339\u914d\n        if(s.length() == 0) return 0;\n        Stack<Integer> stack = new Stack<>();\n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(stack.isEmpty()) {\n                // \u8fd9\u91cc\u7528-1\u4ee3\u8868\u5de6\u62ec\u53f7\n                // \u56e0\u4e3a\u662f\u5339\u914d\u7684\u62ec\u53f7\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u80af\u5b9a\u662f(\n                stack.push(-1);\n                continue;\n            }\n            // \u5982\u679c\u8fd8\u662f\u5de6\u62ec\u53f7\n            if(c == '(') {\n                stack.push(-1);\n                continue;\n            }\n            // \u5339\u914d\u4e0a\uff1a\u6808\u9876\u5143\u7d20\u4e3a-1\uff0c\u8bf4\u660e\u662f\u5de6\u62ec\u53f7\uff0c\u548c\u5f53\u524d\u53f3\u62ec\u53f7\u5339\u914d\n            if(stack.peek() == -1 && c == ')') {\n                stack.pop(); // \u5c06\u5de6\u62ec\u53f7\u5f39\u51fa\n                stack.push(1); // \u5165\u6808\u5339\u914d\u62ec\u53f7\u6570\u91cf\uff1a1\n                continue;\n            }\n            // \u5982\u679c\u6808\u9876\u5143\u7d20\u4e0d\u662f-1\uff0c\u8bf4\u660e\u662f\u4e0a\u4e00\u6b21\u7684\u8ba1\u7b97\u7ed3\u679c\n            if(stack.peek() != -1) {\n                int num = 0;\n                // \u5c06\u8ba1\u7b97\u7684\u6570\u5b57\u5168\u90e8\u5f39\u51fa\u5e76\u4e14\u76f8\u52a0\n                while(stack.peek() != -1) {\n                    num += stack.pop();\n                }\n                num = num * 2; // \u8bf4\u660e\u662f(A+B+..)\u8fd9\u79cd\u60c5\u51b5\n                stack.pop(); // \u5f39\u51fa\u5de6\u62ec\u53f7\n                stack.push(num); // \u52a0\u5165\u8ba1\u7b97\u597d\u7684\u503c\n            }\n        }\n        // \u6700\u540e\u5f39\u51fa\u6240\u6709\u7d2f\u52a0\u7684\u6570\u5b57\n        int result = 0;\n        while(!stack.isEmpty()) result += stack.pop();\n        return result;\n    }\n}\n")),(0,i.kt)("h2",{id:"227-basic-calculator-ii"},"227. Basic Calculator II"),(0,i.kt)("p",null,"Given a string s which represents an expression, evaluate this expression and return its value.\nThe integer division should truncate toward zero.\nYou may assume that the given expression is always valid. All intermediate results will be in the range of ","[-2(31), 2(31) - 1]",".\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval()."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Example 1: Input: s = "3+2*2"  Output: 7'),(0,i.kt)("li",{parentName:"ul"},'Example 2: Input: s = " 3/2 " Output: 1'),(0,i.kt)("li",{parentName:"ul"},'Example 3: Input: s = " 3+5 / 2 " Output: 5')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int calculate(String s) {\n        int len = s.length();\n        // \u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u7a7a\u683c\uff0c\u5982\u4f55\u8fc7\u6ee4\u6389\uff1f\n        Stack<Integer> stack = new Stack<>();\n        int num = 0;\n        char prevOp = '+';\n\n        for(int i = 0; i < len; i++) {\n            char c = s.charAt(i);\n            // \u5224\u65ad\u5b57\u7b26\u662f\u5426\u6570\u5b57, \u56e0\u4e3a\u6bcf\u6b21\u53ea\u80fd\u53d6\u4e00\u4e2a\u5b57\u7b26\uff0c\n            if(Character.isDigit(c)) {\n                // \u5982\u679c\u6570\u5b57\u662f\u4e24\u4f4d\uff0c\u90a3\u5c31\u51c9\u4e86\uff0c\u6240\u4ee5\u8981\u7d2f\u52a0\n                // \u524d\u4e00\u4e2a\u4e58\u4ee510 + \u5f53\u524d\u7684\n                // \u8fd9\u91cc\u8bb0\u4f4f\uff0c\u76f4\u63a5\u51cf\u53bb'0'\u5f97\u5230\u6570\u5b57\n                num = num * 10 + (c - '0');\n            }\n            // \u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8981\u5224\u65adi?\n            // \u56e0\u4e3a\u5faa\u73af\u5230\u5b57\u7b26\u4e32\u672b\u5c3e\uff0c\u5df2\u7ecf\u4e0d\u53ef\u80fd\u662f\u5b57\u7b26\u4e86\n            // \u6b64\u523b\u5c31\u8981\u5224\u65ad\u4e86\n            // \u603b\u4e4b\uff1a\u5f00\u59cb\u8ba1\u7b97\u7684\u6761\u4ef6\u662f\u8981\u4e48\u9047\u5230\u8fd0\u7b97\u7b26\uff0c\u8981\u4e48\u5230\u8fbe\u5faa\u73af\u7684\u672b\u5c3e\n            if (!Character.isDigit(c) && c != ' ' || i == len - 1) {\n                switch(prevOp) {\n                    case '+' :\n                        stack.push(num);\n                        break;\n                    case '-' :\n                        stack.push(-num);\n                        break;\n                    case '*' :\n                        stack.push(stack.pop() * num);\n                        break;\n                    case '/' :\n                        stack.push(stack.pop() / num);\n                        break;\n                }\n                prevOp = c;\n                num = 0;\n            }\n        }\n        int result = 0;\n        while(!stack.isEmpty()) result += stack.pop();\n        return result;\n    }\n}\n")),(0,i.kt)("h2",{id:"155-min-stack"},"155. Min Stack"),(0,i.kt)("p",null,"Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\nImplement the MinStack class:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"MinStack() initializes the stack object."),(0,i.kt)("li",{parentName:"ul"},"void push(int val) pushes the element val onto the stack."),(0,i.kt)("li",{parentName:"ul"},"void pop() removes the element on the top of the stack."),(0,i.kt)("li",{parentName:"ul"},"int top() gets the top element of the stack."),(0,i.kt)("li",{parentName:"ul"},"int getMin() retrieves the minimum element in the stack.\nYou must implement a solution with O(1) time complexity for each function.\nExample 1:\nInput\n",'["MinStack","push","push","push","getMin","pop","top","getMin"]',"[],","[-2]",",","[0]",",","[-3]",",[],[],[],[]]\nOutput\n","[null,null,null,null,-3,null,0,-2]","\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class MinStack {\n\n    private Stack<Integer> stack;\n    private Stack<Integer> minStack;\n\n    public MinStack() {\n        stack = new Stack<>();\n        minStack = new Stack<>();\n    }\n    \n    public void push(int x) {\n        stack.push(x);\n        if(minStack.isEmpty()) {\n            minStack.push(x);\n            return; // \u8fd9\u91cc\u5fd8\u4e86return \u4e5f\u662f\u5de8\u5751\n        }\n        // \u8fd9\u91cc\u6709\u5751\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u90fd\u8981\u653e\uff0c\n        // \u5982\u679c\u51fa\u6808\u628a\u6700\u5c0f\u503c\u51fa\u6389\uff0c\u524d\u9762\u8fd8\u6709\u6700\u5c0f\u503c\uff0c\u90a3\u5c31\u4e0d\u5bf9\u4e86\n        if(x <= minStack.peek()) {\n            minStack.push(x);\n        }\n    }\n\n    public void pop() {\n        if(stack.isEmpty()) return;\n        int val = stack.pop();\n        // \u5982\u679c\u6700\u5c0f\u6808\u7684\u6808\u9876\u5143\u7d20\u7b49\u4e8e\u51fa\u6808\u5143\u7d20\n        // \u6700\u5c0f\u6808\u51fa\u6808\n        if(minStack.peek() == val) minStack.pop();\n    }\n    \n    public int top() {\n        return stack.peek();\n    }\n    \n    public int getMin() {\n        if(minStack.isEmpty()) return -1;\n        return minStack.peek();\n    }\n}\n")),(0,i.kt)("h2",{id:"496-next-greater-element-i"},"496. Next Greater Element I"),(0,i.kt)("p",null,"The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\nYou are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\nFor each 0 <= i < nums1.length, find the index j such that nums1","[i]"," == nums2","[j]"," and determine the next greater element of nums2","[j]"," in nums2. If there is no next greater element, then the answer for this query is -1.\nReturn an array ans of length nums1.length such that ans","[i]"," is the next greater element as described above."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Example 1:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Input: nums1 = ","[4,1,2]",", nums2 = ","[1,3,4,2]"),(0,i.kt)("li",{parentName:"ul"},"Output: ","[-1,3,-1]"),(0,i.kt)("li",{parentName:"ul"},"Explanation: The next greater element for each value of nums1 is as follows:"),(0,i.kt)("li",{parentName:"ul"},"4 is underlined in nums2 = ","[1,3,4,2]",". There is no next greater element, so the answer is -1."),(0,i.kt)("li",{parentName:"ul"},"1 is underlined in nums2 = ","[1,3,4,2]",". The next greater element is 3."),(0,i.kt)("li",{parentName:"ul"},"2 is underlined in nums2 = ","[1,3,4,2]",". There is no next greater element, so the answer is -1."))),(0,i.kt)("li",{parentName:"ul"},"Example 2:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Input: nums1 = ","[2,4]",", nums2 = ","[1,2,3,4]"),(0,i.kt)("li",{parentName:"ul"},"Output: ","[3,-1]"),(0,i.kt)("li",{parentName:"ul"},"Explanation: The next greater element for each value of nums1 is as follows:"),(0,i.kt)("li",{parentName:"ul"},"2 is underlined in nums2 = ","[1,2,3,4]",". The next greater element is 3."),(0,i.kt)("li",{parentName:"ul"},"4 is underlined in nums2 = ","[1,2,3,4]",". There is no next greater element, so the answer is -1.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n        /**\n         * \u628a\u6570\u7ec4\u7684\u5143\u7d20\u60f3\u8c61\u6210\u5e76\u5217\u7ad9\u7acb\u7684\u4eba\uff0c\u5143\u7d20\u5927\u5c0f\u60f3\u8c61\u6210\u4eba\u7684\u8eab\u9ad8\u3002\n         * \u8fd9\u4e9b\u4eba\u9762\u5bf9\u4f60\u7ad9\u6210\u4e00\u5217\uff0c\u5982\u4f55\u6c42\u5143\u7d20\u300c2\u300d\u7684 Next Greater Number\u5462\uff1f\n         * \u5f88\u7b80\u5355\uff0c\u5982\u679c\u80fd\u591f\u770b\u5230\u5143\u7d20\u300c2\u300d\uff0c\n         * \u90a3\u4e48\u4ed6\u540e\u9762\u53ef\u89c1\u7684\u7b2c\u4e00\u4e2a\u4eba\u5c31\u662f\u300c2\u300d\u7684Next Greater Number\uff0c\n         * \u56e0\u4e3a\u6bd4\u300c2\u300d\u5c0f\u7684\u5143\u7d20\u8eab\u9ad8\u4e0d\u591f\uff0c\u90fd\u88ab\u300c2\u300d\u6321\u4f4f\u4e86\uff0c\u7b2c\u4e00\u4e2a\u9732\u51fa\u6765\u7684\u5c31\u662f\u7b54\u6848\u3002\n                                --------\n                                |      -------\n            --------------------|      |\n            |       -------|    |      |\n            |       |      |    |      |\n            2       1      2    4      3\n            4       2      4    -1     -1\n        */\n    public int[] nextGreaterElement(int[] nums1, int[] nums2) {\n        // \u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528map\uff0c\u56e0\u4e3a\u8bf4\u4e86nums1\u662fnums2\u7684\u81ea\u5df1\n        // \u90a3\u76f4\u63a5\u5224\u65adnums2\u91cc\u7684\u5143\u7d20\u5c31\u53ef\u4ee5\u4e86\n        Map<Integer, Integer> map = new HashMap<>();\n        // \u7531\u4e8eVector\u7531\u4e8e\u6548\u7387\u95ee\u9898\u5df2\u7ecf\u88ab\u5f03\u7528\uff0c\n        // \u56e0\u6b64\u7ee7\u627fVector\u7684Stack\u4e5f\u5b58\u5728\u6548\u7387\u95ee\u9898\uff0c\u6545\u4e0d\u63a8\u8350\u4f7f\u7528\u3002\n        // Stack<Integer> stack = new Stack<>();\n        Deque<Integer> deque = new ArrayDeque<>();\n        for(int i = nums2.length - 1; i >= 0; i --) {\n            int curVal = nums2[i];\n            // \u5728\u5f53\u524d\u8fd9\u4e2acurVal\uff0c\u6bd4\u4ed6\u5c0f(\u77ee)\u7684\u5143\u7d20\u5168\u90e8\u51fa\u961f\n            while(!deque.isEmpty() && curVal > deque.peek()) deque.pop();\n            // \u5f53\u524d\u5143\u7d20\uff0c\u4e0b\u4e00\u4e2a\u5927\u7684\u5143\u7d20\uff0c\u8981\u4e48\u6808\u7a7a\u4e86\u662f-1\n            // \u8981\u4e48\u6808\u91cc\u9762\u8fd8\u6709\u6bd4\u4ed6\u9ad8\u7684\uff0c\u5c31\u662f\u4e0b\u4e00\u4e2a\u6bd4\u4ed6\u5927\u7684\u503c\n            map.put(curVal, deque.isEmpty() ? -1 : deque.peek());\n            // \u81ea\u5df1\u5165\u961f\n            deque.push(curVal);\n        }\n        // \u56e0\u4e3a\u8981\u8fd4\u56de\u6570\u7ec4\n        int[] arr = new int[nums1.length];\n        for(int i = 0; i < nums1.length; i++) {\n            arr[i] = map.get(nums1[i]);\n        }\n        return arr;\n    }\n}\n")),(0,i.kt)("h2",{id:"901-online-stock-span"},"901. Online Stock Span"),(0,i.kt)("p",null,"Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.\nThe span of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example, if the price of the stock in the last four days is ","[7,2,1,2]"," and the price of the stock today is 2, then the span of today is 4 because starting from today, the price of the stock was less than or equal 2 for 4 consecutive days."),(0,i.kt)("li",{parentName:"ul"},"Also, if the price of the stock in the last four days is ","[7,34,1,2]"," and the price of the stock today is 8, then the span of today is 3 because starting from today, the price of the stock was less than or equal 8 for 3 consecutive days.\nImplement the StockSpanner class:"),(0,i.kt)("li",{parentName:"ul"},"StockSpanner() Initializes the object of the class."),(0,i.kt)("li",{parentName:"ul"},"int next(int price) Returns the span of the stock's price given that today's price is price.\nExample 1:\nInput\n",'["StockSpanner", "next", "next", "next", "next", "next", "next", "next"]',"[], ","[100]",", ","[80]",", ","[60]",", ","[70]",", ","[60]",", ","[75]",", ","[85]","]\nOutput ","[null, 1, 1, 1, 2, 1, 4, 6]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class StockSpanner {\n    /**\n     * \u8fd9\u91cc\u6784\u5efa\u4e00\u4e2a\u5bf9\u8c61\u7528\u6765\n     */\n    class Pair {\n        int price; // \u503c\n        int count; // \u6570\u91cf\n        public Pair(int price, int count) {\n            this.price = price;\n            this.count = count;\n        }\n    }\n    // \u8fd9\u91cc\u5927\u5bb6\u90fd\u7528deque\uff0c\u6548\u7387\u66f4\u9ad8\n    private Deque<Pair> deque; \n    public StockSpanner() {\n        deque = new ArrayDeque<>();\n    }\n    /**\n     * \u67e5\u627e\u6bd4\u5f53\u524d\u5c0f\u7684\u4e4b\u524d\u7684\u4e2a\u6570\u548c\uff1f\n     * \u7ef4\u62a4\u5355\u8c03\u9012\u51cf\u6808\n     * \u6808\u91cc\u4fdd\u5b58\u7684\u5143\u7d20\u6709\uff1a\u5f53\u524d\u6570\u91cf+ \u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u6570\u503c\u7684\u4e2a\u6570\u548c\n     */\n    public int next(int price) {\n        if(deque.isEmpty()) {\n            // \u5168\u90e8\u64cd\u4f5c\u961f\u5c3e\uff0c\u6a21\u62df\u6808\n            deque.offerLast(new Pair(price, 1));\n            return 1;\n        }\n        int count = 1; // \u81ea\u5df1\u672c\u8eab\u4e5f\u7b97\u4e00\u6b21\n        // \u627e\u51fa\u6bd4\u5f53\u524d\u503c\u5c0f\u7684\u8bb0\u5f55\uff0c\u5168\u90e8\u51fa\u6808\n        // \u6838\u5fc3\u662f\uff1a\u4e4b\u524d\u6709\u6ca1\u6709\u6bd4\u6211\u5c0f\u7684\uff1f\u6709\u7684\u8bdd\u544a\u8bc9\u6211\u4f60\u7684count\u662f\u4ec0\u4e48\uff1f\n        // \u56e0\u4e3a\u540e\u9762\u7684\u5143\u7d20\u6bd4\u8f83\u5230\u6bd4\u81ea\u5df1\u5927\u7684\u5143\u7d20\u5c31\u5f97\u505c\u6b62\n        while(!deque.isEmpty() && deque.peekLast().price <= price) {\n            // \u7d2f\u52a0\u6bd4\u5f53\u524dprice\u5c0f\u7684\u6570\u91cf\n            // \u5168\u90e8\u64cd\u4f5c\u961f\u5c3e\uff0c\u6a21\u62df\u6808\n            count += deque.pollLast().count;\n        }\n        // \u518d\u6b21\u653e\u8fdb\u6808\u4e2d\uff0c\u4f9b\u4e0b\u4e00\u6b21\u5224\u65ad\u4f7f\u7528\n        deque.offerLast(new Pair(price, count));\n        return count;\n    }\n}\n")))}m.isMDXComponent=!0}}]);