"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3350],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,m=d["".concat(l,".").concat(u)]||d[u]||g[u]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3448:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},o="String",s={unversionedId:"leetcode/string",id:"leetcode/string",title:"String",description:"344.Reverse String",source:"@site/docs/leetcode/1.string.md",sourceDirName:"leetcode",slug:"/leetcode/string",permalink:"/docs/leetcode/string",draft:!1,editUrl:"https://github.com/JonathanTube/Jonathan.Kong.github.com/tree/main/docs/leetcode/1.string.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Algorithm Learning",permalink:"/docs/category/algorithm-learning"},next:{title:"linkedList",permalink:"/docs/leetcode/linkedList"}},l={},p=[{value:"344.Reverse String",id:"344reverse-string",level:2},{value:"541. Reverse String II",id:"541-reverse-string-ii",level:2},{value:"1768. Merge Strings Alternately",id:"1768-merge-strings-alternately",level:2},{value:"2299. Strong Password Checker II",id:"2299-strong-password-checker-ii",level:2},{value:"2710. Remove Trailing Zeros From a String",id:"2710-remove-trailing-zeros-from-a-string",level:2}],c={toc:p},d="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"string"},"String"),(0,a.kt)("h2",{id:"344reverse-string"},"344.Reverse String"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Write a function that reverses a string. The input string is given as an array of characters s."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},'Example 1:\nInput: s = ["h","e","l","l","o"]\nOutput: ["o","l","l","e","h"]\n'))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="solution"',title:'"solution"'},"class Solution {\n    public void reverseString(char[] s) {\n        int left = 0, right = s.length - 1;\n        while(left < right) {\n            char temp = s[left];\n            s[left] = s[right];\n            s[right] = temp;\n            left ++;\n            right --;\n        }\n    }\n}\n")),(0,a.kt)("h2",{id:"541-reverse-string-ii"},"541. Reverse String II"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.\nIf there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},'Example 1:\nInput: s = "abcdefg", k = 2\nOutput: "bacdfeg"\n'))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"solution",solution:!0},"class Solution {\n    public String reverseStr(String s, int k) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i += 2*k) { // \u6bcf2K\u4e2a\uff0c\u53cd\u8f6c\u524dK\u4e2a\uff0c\u6240\u4ee5\u6b65\u957f\u662f2K\n            int start = i; // \u5f00\u59cb\u4f4d\u7f6e\n            int end = i + k - 1; // \u8fd9\u91cc\u6c42\u5f97\u53cd\u8f6c\u7684\u672b\u4f4d\u7f6e\n            // \u5224\u65ad\u8fb9\u754c\uff0c\u5982\u679c\u672b\u4f4d\u7f6e\u8d85\u8fc7\u4e86\u6570\u7ec4\u6700\u5927\u957f\u5ea6\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n            if(end > arr.length - 1) end = arr.length - 1;\n            reverseArray(arr,start,end);\n        }\n        return new String(arr);\n    }\n\n\n    private void reverseArray(char[] arr, int start, int end) {\n        while(start < end) {\n            char temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start ++;\n            end --;\n        }\n    }\n}\n")),(0,a.kt)("h2",{id:"1768-merge-strings-alternately"},"1768. Merge Strings Alternately"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},'Example 1:\nInput: word1 = "abc", word2 = "pqr"\nOutput: "apbqcr"\nExplanation: The merged string will be merged as so:\nword1:  a   b   c\nword2:    p   q   r\nmerged: a p b q c r\n'))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"class Solution {\n    public String mergeAlternately(String word1, String word2) {\n        StringBuilder sb = new StringBuilder();\n        int len1 = word1.length();\n        int len2 = word2.length();\n        int index1 = 0;\n        int index2 = 0;\n        while(index1 < len1 || index2 < len2) { // \u5982\u679c\u4e321\u548c\u4e322\u6709\u4e00\u4e2a\u4e0d\u4e3a\u7a7a\uff0c\u5c31\u7ee7\u7eed\n            if(index1 < len1) sb.append(word1.charAt(index1)); // \u4f46\u662f\u8fd9\u91cc\u5c31\u8981\u5224\u65ad\u662f\u5426\u8d8a\u754c\n            if(index2 < len2) sb.append(word2.charAt(index2));\n            index1++;\n            index2++;\n        }\n        return sb.toString();\n    }\n}\n")),(0,a.kt)("h2",{id:"2299-strong-password-checker-ii"},"2299. Strong Password Checker II"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"A password is said to be strong if it satisfies all the following criteria(\u51c6\u5219):"),(0,a.kt)("p",{parentName:"admonition"},'It has at least 8 characters.\nIt contains at least one lowercase letter.\nIt contains at least one uppercase letter.\nIt contains at least one digit.\nIt contains at least one special character. The special characters are the characters in the following string: "!@#$%^&*()-+".\nIt does not contain 2 of the same character in adjacent(\u76f8\u90bb) positions (i.e., "aab" violates(\u8fdd\u53cd) this condition, but "aba" does not).\nGiven a string password, return true if it is a strong password. Otherwise, return false.\nExample 1:')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'Input: password = "IloveLe3tcode!"\nOutput: true\nExplanation: The password meets all the requirements. Therefore, we return true.\nExample 2:\n\nInput: password = "Me+You--IsMyDream"\nOutput: false\nExplanation: The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false.\nExample 3:\n\nInput: password = "1aB!"\nOutput: false\nExplanation: The password does not meet the length requirement. Therefore, we return false.\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'class Solution {\n    public boolean strongPasswordCheckerII(String password) {\n        char[] keys = "!@#$%^&*()-+".toCharArray();\n        Set<Character> set = new HashSet<>(keys.length);\n        for(char key : keys) {\n            set.add(key);\n        }\n        int len = password.length();\n        if(len < 8) return false;\n\n        boolean containsLowerChar = false;\n        boolean containsUpperChar = false;\n        boolean containsDigit = false;\n        boolean containsSymbol = false;\n        char[] arr = password.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            char c = arr[i];\n            if(i + 1 < arr.length && arr[i] == arr[i + 1]) return false;\n            if(Character.isLowerCase(c)) {\n                containsLowerChar = true;\n            }else if(Character.isUpperCase(c)) {\n                containsUpperChar = true;\n            }else if(Character.isDigit(c)) {\n                containsDigit = true;\n            }else if(set.contains(c)) {\n                containsSymbol = true;\n            }\n        }\n        return containsLowerChar && containsUpperChar && containsDigit && containsSymbol;\n    }\n}\n')),(0,a.kt)("h2",{id:"2710-remove-trailing-zeros-from-a-string"},"2710. Remove Trailing Zeros From a String"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Given a positive integer num represented as a string, return the integer num without trailing zeros as a string."),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Example 1:")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Input: num = "51230100"')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Output: "512301"')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Explanation: Integer "51230100" has 2 trailing zeros, we remove them and return integer "512301".')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Example 2:")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Input: num = "123"')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Output: "123"')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Explanation: Integer "123" has no trailing zeros, we return integer "123".')))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"class Solution {\n    public String removeTrailingZeros(String num) {\n        char[] chars = num.toCharArray();\n        int startZeroIndex = -1;\n        for(int i = chars.length - 1; i >= 0; i--) {\n            if(chars[i] != '0') break;\n            startZeroIndex = i;\n        }\n        if(startZeroIndex == -1) return num;\n        return num.substring(0, startZeroIndex);\n    }\n}\n")))}g.isMDXComponent=!0}}]);