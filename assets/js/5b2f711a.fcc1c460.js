"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[475],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=i.createContext({}),d=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(o.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},v=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),v=r,g=u["".concat(o,".").concat(v)]||u[v]||p[v]||a;return t?i.createElement(g,l(l({ref:n},c),{},{components:t})):i.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=v;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[u]="string"==typeof e?e:r,l[1]=s;for(var d=2;d<a;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}v.displayName="MDXCreateElement"},5663:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var i=t(7462),r=(t(7294),t(3905));const a={},l="Graph DFS&BFS",s={unversionedId:"leetcode/graph",id:"leetcode/graph",title:"Graph DFS&BFS",description:"Adjacency Matrix",source:"@site/docs/leetcode/8.graph.md",sourceDirName:"leetcode",slug:"/leetcode/graph",permalink:"/docs/leetcode/graph",draft:!1,editUrl:"https://github.com/JonathanTube/Jonathan.Kong.github.com/tree/main/docs/leetcode/8.graph.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"matrix",permalink:"/docs/leetcode/matrix"},next:{title:"binary tree",permalink:"/docs/leetcode/binary tree"}},o={},d=[{value:"Adjacency Matrix",id:"adjacency-matrix",level:2},{value:"Adjacency List",id:"adjacency-list",level:2},{value:"Basic Data Structure",id:"basic-data-structure",level:3},{value:"DFS loop travesal",id:"dfs-loop-travesal",level:3},{value:"DFS recursion traversal",id:"dfs-recursion-traversal",level:3},{value:"Adjacency Matrix BFS",id:"adjacency-matrix-bfs",level:2},{value:"Adjacency List BFS",id:"adjacency-list-bfs",level:2},{value:"Topological Sort",id:"topological-sort",level:2}],c={toc:d},u="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"graph-dfsbfs"},"Graph DFS&BFS"),(0,r.kt)("h2",{id:"adjacency-matrix"},"Adjacency Matrix"),(0,r.kt)("admonition",{title:"\u90bb\u63a5\u77e9\u9635\u793a\u4f8b",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"/*      \n        j=0,j=1,j=2,j=3,j=4\n   i=0  [1,  0,  1,  0,  1]\n   i=1  [0,  0,  0,  0,  0]\n   i=2  [1,  0,  1,  0,  1]\n   i=3  [0,  0,  0,  0,  0]\n   i=4  [1,  0,  1,  0,  1]\n */\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"public class AdjacencyMatrix {\n    // \u8bb0\u5f55\u904d\u5386\u7684\u8282\u70b9\n    private static final List<Integer> result = new ArrayList<>();\n    public static List<Integer> traversal(int[][] matrix) {\n        // \u83b7\u53d6\u8282\u70b9\u4e2a\u6570\n        int len = matrix.length;\n        // \u8bb0\u5f55\u5df2\u7ecf\u88ab\u8bbf\u95ee\u7684\u8282\u70b9\n        boolean[] visited = new boolean[len];\n        // \u4ece\u6bcf\u4e2a\u8282\u70b9\u5f00\u59cb\uff0cdfs\u904d\u5386\u6240\u6709\u8282\u70b9\n        // \u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8981\u4ece\u6bcf\u4e2a\u8282\u70b9dfs\u904d\u5386\n        // \u56e0\u4e3a\u4f1a\u6709\u5b64\u5c9b\uff0c\u6ca1\u6709\u8054\u901a\u7684\u8282\u70b9\n        for (int i = 0; i < len; i++) dfs(matrix, i, visited);\n        return result;\n    }\n\n    /**\n     * @param matrix \u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8981\u4f20\u9012matrix\uff0c\u56e0\u4e3a\u8981\u6839\u636e\u8fd9\u4e2amatrix\u67e5\u627e\u5173\u8054\u8282\u70b9\n     * @param i \u8fd9\u91cc\u7684i\u4ee3\u8868\u7684\u662f\u9876\u70b9vertex\n     * @param visited \u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u9632\u6b62\u91cd\u590d\u8bbf\u95ee\u5f62\u6210\u73af\n     */\n    private static void dfs(int[][] matrix, int i, boolean[] visited) {\n        // \u8bbf\u95ee\u8fc7\u4e86\uff0c\u8df3\u8fc7\n        if(visited[i]) return;\n        // \u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u52a0\u5165\u5230list\n        result.add(i);\n        // \u8bbe\u7f6e\u4e3a\u8bbf\u95ee\u8fc7\n        visited[i] = true;\n        // \u4ece\u5f53\u524d\u8282\u70b9\uff0c\u7eb5\u5411\u626b\u63cf\u6570\u7ec4\n        for (int j = 0; j < matrix[i].length; j++) {\n            // \u5982\u679c\u6ca1\u6709\u8fb9\uff0c\u8df3\u8fc7\n            if(matrix[i][j] != 1) continue;\n            // \u5982\u679c\u4e0b\u4e2a\u8282\u70b9\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u8df3\u8fc7\n            if(visited[j]) continue;\n            dfs(matrix, j, visited);\n        }\n    }\n}\n")),(0,r.kt)("h2",{id:"adjacency-list"},"Adjacency List"),(0,r.kt)("h3",{id:"basic-data-structure"},"Basic Data Structure"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="\u81ea\u5b9a\u4e49\u8282\u70b9"',title:'"\u81ea\u5b9a\u4e49\u8282\u70b9"'},"/**\n * \u8fd9\u91cc\u4e0d\u80fd\u7528queue\uff0c\u8fed\u4ee3\u7684\u65f6\u5019\u51fa\u6808\uff0c\n * \u5c31\u4f1a\u628a\u56fe\u7684adjacency List \u6e05\u7a7a\n * \u6240\u4ee5\u81ea\u5df1\u6784\u5efa\u94fe\u8868\n */\npublic class Node<T> {\n    T val;\n    Node<T> prev;\n    Node<T> next;\n    public Node(T val){\n        this.val = val;\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="\u81ea\u5b9a\u4e49\u94fe\u8868"',title:'"\u81ea\u5b9a\u4e49\u94fe\u8868"'},"public class AdjList<T> {\n    // \u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\uff0c\u81ea\u5b9a\u4e49\u94fe\u8868\u5934\u5c3e\n    Node<T> head;\n    Node<T> tail;\n    int size = 0;\n\n    public void addHead(T val) {\n        Node<T> newNode = new Node<>(val);\n        if(size == 0) {\n            head = newNode;\n            tail = newNode;\n        }else {\n            newNode.next = head;\n            head.prev = newNode;\n            head = newNode;\n        }\n        size ++; // \u8fd9\u91cc\u5fd8\u4e86\n    }\n\n    public void addLast(T val) {\n        Node<T> newNode = new Node<>(val);\n        if(size == 0) {\n            head = newNode;\n            tail = newNode;\n        }else {\n            tail.next = newNode;\n            newNode.prev = tail;\n            tail = tail.next;\n        }\n        size ++; // \u8fd9\u91cc\u522b\u5fd8\u4e86\n    }\n\n    public boolean isEmpty() {\n        return size == 0;\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="\u56fe\u7684\u5b9a\u4e49"',title:'"\u56fe\u7684\u5b9a\u4e49"'},"/**\n * \u56fe\n */\npublic  class Graph {\n    int vertices; // \u8282\u70b9\uff0c0...vertices\n    AdjList<Integer>[] adjListArray; // \u90bb\u63a5\u8868\n    public Graph(int vertices) {\n        this.vertices = vertices;\n        adjListArray = new AdjList[vertices];\n        for (int i = 0; i < vertices; i++) {\n            adjListArray[i] = new AdjList<>();\n        }\n    }\n\n    public void addEdge(int start, int end) {\n        if(start > vertices - 1) return;\n        adjListArray[start].addLast(end);\n    }\n}\n")),(0,r.kt)("h3",{id:"dfs-loop-travesal"},"DFS loop travesal"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5faa\u73af\u65b9\u5f0f"',title:'"\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5faa\u73af\u65b9\u5f0f"'},"/*\n * 0=1->\n * 1=2->3->4->\n * 2=3->\n * 3=4->\n * 4=1->2->\n */\npublic List<Integer> dfs(Graph g) {\n    List<Integer> result = new ArrayList<>(g.vertices);\n    boolean[] visited = new boolean[g.vertices];\n    Deque<Integer> deque = new LinkedList<>();\n    for (int i = 0; i < g.vertices; i++) {\n        // \u5904\u7406\u9996\u8282\u70b9\n        deque.offerLast(i);\n        // \u9996\u8282\u70b9\uff0c\u8fd9\u65f6\u961f\u5217\u80af\u5b9a\u4e0d\u4e3a\u7a7a\n        while(!deque.isEmpty()) {\n            // \u51fa\u6808\n            int val = deque.pollLast();\n            // \u5982\u679c\u8bbf\u95ee\u8fc7\uff0c\u8df3\u8fc7\n            if(visited[val]) continue;\n            // \u8bbe\u7f6e\u4e3a\u8bbf\u95ee\u8fc7\n            visited[val] = true;\n            // \u52a0\u5165\u7ed3\u679c\n            result.add(val);\n            // \u5c06\u4e0e\u5f53\u524d\u8282\u70b9\u6709\u5173\u8054\u7684\u8282\u70b9\u4f9d\u6b21\u653e\u5165\u961f\u5217\u4e2d\n            // \u4e0b\u4e00\u6b21\u5224\u65ad\uff0c\u80af\u5b9a\u662f\u961f\u5c3e\uff0c\u8fd9\u91cc\u662f\u6a21\u62df\u6808\uff0c\u4e5f\u5c31\u662f\u6808\u9876\n            AdjList<Integer> adjList = g.adjListArray[val];\n            Node<Integer> node = adjList.head;\n            while(node != null) {\n                deque.offerLast(node.val);\n                node = node.next;\n            }\n        }\n    }\n    return result;\n}\n")),(0,r.kt)("h3",{id:"dfs-recursion-traversal"},"DFS recursion traversal"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u9012\u5f52\u65b9\u5f0f"',title:'"\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u9012\u5f52\u65b9\u5f0f"'},"/*\n * 0=1->\n * 1=2->3->4->\n * 2=3->\n * 3=4->\n * 4=1->2->\n */\npublic List<Integer> dfs(Graph g) {\n    List<Integer> result = new ArrayList<>(g.vertices);\n    boolean[] visited = new boolean[g.vertices];\n    // \u5faa\u73af\u6bcf\u4e2a\u9876\u70b9\n    for(int i = 0; i < g.vertices; i++) {\n        recursion(g, i, visited, result);\n    }\n    return result;\n}\n\npublic void recursion(Graph g,int val, boolean[] visited, List<Integer> result) {\n    // \u5904\u7406\u5f53\u524d\u9876\u70b9\n    if(visited[val]) return;\n    // \u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u4e00\u5b9a\u8981\u8df3\u8fc7\n    visited[val] = true;\n    result.add(val);\n    // \u83b7\u53d6\u5f53\u524d\u8282\u70b9\u7684\u90bb\u63a5\u8868(adjacency list)\u7684\u5934\u7ed3\u70b9\n    Node<Integer> node = g.adjListArray[val].head;\n    // \u904d\u5386\u9886\u63a5\u8868\u4e2d\u7684\u8282\u70b9\n    while(node!= null) {\n        recursion(g, node.val,visited, result);\n        node = node.next;\n    }\n}\n")),(0,r.kt)("h1",{id:"graph-bfs-\u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u904d\u5386"},"Graph BFS \u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u904d\u5386"),(0,r.kt)("h2",{id:"adjacency-matrix-bfs"},"Adjacency Matrix BFS"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"public class AdjacencyMatrix {\n    // \u8bb0\u5f55\u904d\u5386\u7684\u8282\u70b9\n    private static final List<Integer> result = new ArrayList<>();\n    public static List<Integer> traversal(int[][] matrix) {\n        // \u83b7\u53d6\u8282\u70b9\u4e2a\u6570\n        int len = matrix.length;\n        // \u8bb0\u5f55\u5df2\u7ecf\u88ab\u8bbf\u95ee\u7684\u8282\u70b9\n        boolean[] visited = new boolean[len];\n        /* j==>  0  1  2  3  4\n           i=0  [1, 0, 1, 0, 1]\n           i=1  [0, 0, 0, 0, 0]\n           i=2  [1, 0, 1, 0, 1]\n           i=3  [0, 0, 0, 0, 0]\n           i=4  [1, 0, 1, 0, 1]\n         */\n        Deque<Integer> deque = new LinkedList<>();\n        for (int i = 0; i < len; i++) {\n            // \u904d\u5386\u6bcf\u4e00\u4e2avertex\n            if(visited[i]) continue;\n            deque.offerLast(i);// \u5165\u961f\n            visited[i] = true; // \u6807\u8bb0\u5df2\u8bbf\u95ee\n            result.add(i);// \u52a0\u5165\u7ed3\u679c\n            while(!deque.isEmpty()) {\n                // \u51fa\u961f\n                int val = deque.pollFirst();\n                // \u904d\u5386\u5173\u8054\u8282\u70b9\n                for (int j = 0; j < matrix[val].length; j++) {\n                    if(matrix[i][j] != 1) continue;\n                    if(visited[j]) continue;\n                    deque.offerLast(j);\n                    visited[j] = true;\n                    result.add(j);\n                }\n            }\n        }\n        return result;\n    }\n}\n")),(0,r.kt)("h2",{id:"adjacency-list-bfs"},"Adjacency List BFS"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"public List<Integer> bfs(Graph g) {\n    List<Integer> result = new ArrayList<>(g.vertices);\n    boolean[] visited = new boolean[g.vertices];\n    Deque<Integer> deque = new LinkedList<>();\n    for (int i = 0; i < g.vertices; i++) {\n        // \u5904\u7406\u9996\u8282\u70b9\n        deque.offerLast(i);\n        // \u9996\u8282\u70b9\uff0c\u8fd9\u65f6\u961f\u5217\u80af\u5b9a\u4e0d\u4e3a\u7a7a\n        while(!deque.isEmpty()) {\n            // \u51fa\u6808\n            int val = deque.pollFirst();\n            // \u5982\u679c\u8bbf\u95ee\u8fc7\uff0c\u8df3\u8fc7\n            if(visited[val]) continue;\n            // \u8bbe\u7f6e\u4e3a\u8bbf\u95ee\u8fc7\n            visited[val] = true;\n            // \u52a0\u5165\u7ed3\u679c\n            result.add(val);\n            // \u5c06\u4e0e\u5f53\u524d\u8282\u70b9\u6709\u5173\u8054\u7684\u8282\u70b9\u4f9d\u6b21\u653e\u5165\u961f\u5217\u4e2d\n            // \u4e0b\u4e00\u6b21\u5224\u65ad\uff0c\u80af\u5b9a\u662f\u961f\u5c3e\uff0c\u8fd9\u91cc\u662f\u6a21\u62df\u6808\uff0c\u4e5f\u5c31\u662f\u6808\u9876\n            AdjList<Integer> adjList = g.adjListArray[val];\n            Node<Integer> node = adjList.head;\n            while(node != null) {\n                deque.offerLast(node.val);\n                node = node.next;\n            }\n        }\n    }\n    return result;\n}\n")),(0,r.kt)("h2",{id:"topological-sort"},"Topological Sort"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Directed Acyclic Graph (DAG) \u6709\u5411\u65e0\u73af\u56fe"),(0,r.kt)("li",{parentName:"ul"},"Active On Vertex (AOV) \u9876\u70b9\u8868\u793a\u6d3b\u52a8\uff0c\u8fb9\u8868\u793a\u5236\u7ea6\u5173\u7cfb"),(0,r.kt)("li",{parentName:"ul"},"Active On Edge (AOE)"),(0,r.kt)("li",{parentName:"ul"},"\u62d3\u6251\u6392\u5e8f\u6b65\u9aa4\uff1a1. \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9 2. \u5220\u9664\u8be5\u8282\u70b9\uff0c\u52a0\u5165\u7ed3\u679c\u4e2d 3.\u5faa\u73af1\u548c2\u76f4\u5230\u6ca1\u6709\u6ee1-\u8db3\u6761\u4ef61\u7684\u8282\u70b9\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u5224\u65adDAG\u4e2d\u7684\u73af\uff1a1. \u8fdb\u884c\u62d3\u6251\u6392\u5e8f 2. \u5224\u65ad\u56fe\u7684\u9876\u70b9\u662f\u5426\u90fd\u5728\u62d3\u6251\u6392\u5e8f\u5e8f\u5217\u4e2d\uff0c\u90fd\u5728\u5373\u65e0\u73af\uff0c\u5426\u5219\u6709\u73af\u3002"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"private List<Integer> topologicalSort(int vertices, int[][] matrix) {\n    List<Integer> result = new ArrayList<>();\n    int[] inDegrees = new int[vertices];\n    // \u7edf\u8ba1\u5165\u5ea6\n    for (int i = 0; i < vertices; i++) {\n        for (int j = 0; j < vertices; j++) {\n            if(matrix[i][j] == 1) inDegrees[j] ++;\n        }\n    }\n    // \u5728\u961f\u5217\u4e2d\u7684\uff0c\u80af\u5b9a\u90fd\u662f\u5165\u5ea6\u4e3a0\u7684vertex\n    Queue<Integer> queue = new LinkedList<>();\n    // \u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\u5165\u961f\n    for (int i = 0; i < inDegrees.length; i++) {\n       if(inDegrees[i] == 0) queue.offer(i);\n    }\n    //bfs\n    while(!queue.isEmpty()) {\n        int i = queue.poll();\n        result.add(i);\n        for (int j = 0; j < vertices; j++) {\n            int edgeFlag = matrix[i][j];\n            if(edgeFlag == 1) { // \u6709\u8fb9\n                // \u5c06\u5173\u8054\u8282\u70b9\u7684\u5165\u5ea6-1\n                inDegrees[j] --;\n                // \u5165\u5ea6\u4e3a0\u4e86\uff0c\u52a0\u5165\u961f\u5217\n                if(inDegrees[j] == 0) queue.offer(j);\n            }\n        }\n    }\n    return result;\n}\n")))}p.isMDXComponent=!0}}]);