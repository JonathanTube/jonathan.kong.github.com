"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7347],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>h});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=a.createContext({}),p=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(u.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=p(t),d=l,h=m["".concat(u,".").concat(d)]||m[d]||c[d]||i;return t?a.createElement(h,r(r({ref:n},s),{},{components:t})):a.createElement(h,r({ref:n},s))}));function h(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=d;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o[m]="string"==typeof e?e:l,r[1]=o;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1374:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(7462),l=(t(7294),t(3905));const i={},r=void 0,o={unversionedId:"leetcode/greedy",id:"leetcode/greedy",title:"greedy",description:"605. Can Place Flowers",source:"@site/docs/leetcode/10. greedy.md",sourceDirName:"leetcode",slug:"/leetcode/greedy",permalink:"/docs/leetcode/greedy",draft:!1,editUrl:"https://github.com/JonathanTube/jonathantube.github.com/tree/main/docs/leetcode/10. greedy.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"binary tree",permalink:"/docs/leetcode/binary tree"},next:{title:"two pointers",permalink:"/docs/leetcode/two pointers"}},u={},p=[{value:"605. Can Place Flowers",id:"605-can-place-flowers",level:2},{value:"122. Best Time to Buy and Sell Stock II",id:"122-best-time-to-buy-and-sell-stock-ii",level:2},{value:"53. Maximum Subarray",id:"53-maximum-subarray",level:2},{value:"455. Assign Cookies",id:"455-assign-cookies",level:2},{value:"Solution2",id:"solution2",level:2},{value:"881. Boats to Save People",id:"881-boats-to-save-people",level:2},{value:"435. Non-overlapping Intervals",id:"435-non-overlapping-intervals",level:2},{value:"55. Jump Game",id:"55-jump-game",level:2},{value:"45. Jump Game II",id:"45-jump-game-ii",level:2}],s={toc:p},m="wrapper";function c(e){let{components:n,...i}=e;return(0,l.kt)(m,(0,a.Z)({},s,i,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"605-can-place-flowers"},"605. Can Place Flowers"),(0,l.kt)("p",null,"You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.\nGiven an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 1: ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: flowerbed = ","[1,0,0,0,1]",", n = 1 "),(0,l.kt)("li",{parentName:"ul"},"Output: true"))),(0,l.kt)("li",{parentName:"ul"},"Example 2: ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: flowerbed = ","[1,0,0,0,1]",", n = 2 "),(0,l.kt)("li",{parentName:"ul"},"Output: false")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"class Solution {\n    public boolean canPlaceFlowers(int[] flowerbed, int n) {\n        int len = flowerbed.length;\n        for(int i = 0; i < len && n > 0;) {\n            // \u5f53\u524d\u5df2\u7ecf\u79cd\u4e86\u82b1, \u540e\u79fb\u4e24\u4e2a\u5355\u4f4d\n            // \u56e0\u4e3a\u9898\u76ee\u8bf4\u4e86\uff0c\u539f\u6570\u7ec4\u6ee1\u8db3\u4e0d\u76f8\u90bb\u539f\u5219\n            if(flowerbed[i] == 1) {\n                i += 2;\n                continue;\n            } \n            // \u8fb9\u754c\u503c\u5224\u65ad\uff0c\u662f\u5426\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\n            // \u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u79cd\uff0c\u76f4\u63a5\u79cd\u4e0a\n            if(i == len - 1) {\n                i += 2;\n                n --;\n                continue;\n            }\n            // \u5224\u65ad\u540e\u4e00\u4e2a\u4f4d\u7f6e\u662f\u5426\u5df2\u79cd\uff1f\n            // \u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981\u5224\u65ad\u524d\u9762\u662f\u5426\u5df2\u79cd(\u6839\u636e\u9898\u610f\u662f\u4e0d\u53ef\u80fd\u7684)\n            if(flowerbed[i + 1] == 0) {\n               i += 2;\n               n --;\n               continue;\n            } \n            // \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f0,\u4f46\u662f\u4e0d\u53ef\u79cd\n            // \u8bf4\u660e\u540e\u4e00\u4e2a\u4f4d\u7f6e\u662f1\uff0c\u90a3\u5f97\u5411\u540e\u79fb\u52a83\u4e2a\u5355\u4f4d\n            i += 3;\n        }\n        return n <= 0; // \u7b49\u4e8e0\u4e5f\u53ef\u4ee5\n    }\n}\n")),(0,l.kt)("h2",{id:"122-best-time-to-buy-and-sell-stock-ii"},"122. Best Time to Buy and Sell Stock II"),(0,l.kt)("p",null,"You are given an integer array prices where prices","[i]"," is the price of a given stock on the i(th) day.\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\nFind and return the maximum profit you can achieve."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 1:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: prices = ","[7,1,5,3,6,4]"),(0,l.kt)("li",{parentName:"ul"},"Output: 7"),(0,l.kt)("li",{parentName:"ul"},"Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7."))),(0,l.kt)("li",{parentName:"ul"},"Example 2:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: prices = ","[1,2,3,4,5]"),(0,l.kt)("li",{parentName:"ul"},"Output: 4"),(0,l.kt)("li",{parentName:"ul"},"Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4."))),(0,l.kt)("li",{parentName:"ul"},"Example 3:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: prices = ","[7,6,4,3,1]"),(0,l.kt)("li",{parentName:"ul"},"Output: 0"),(0,l.kt)("li",{parentName:"ul"},"Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"class Solution {\n    public int maxProfit(int[] prices) {\n        int result = 0;\n        for(int i = 1; i < prices.length; i++) {\n            // \u5f53\u5929\u7684\u4ef7\u683c\u51cf\u53bb\u524d\u4e00\u5929\u7684\u4ef7\u683c\uff0c\u83b7\u5f97\u5f53\u5929\u7684\u5229\u6da6\n            int profit = prices[i] - prices[i - 1];\n            // \u5982\u679c\u5f53\u5929\u6709\u5229\u6da6\uff0c\u90a3\u5c31\u4e70\n            if(profit > 0) result += temp;\n        }\n        return result;\n    }\n}\n")),(0,l.kt)("h2",{id:"53-maximum-subarray"},"53. Maximum Subarray"),(0,l.kt)("p",null,"Given an integer array nums, find the subarray with the largest sum, and return its sum."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 1:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: nums = ","[-2,1,-3,4,-1,2,1,-5,4]"),(0,l.kt)("li",{parentName:"ul"},"Output: 6"),(0,l.kt)("li",{parentName:"ul"},"Explanation: The subarray ","[4,-1,2,1]"," has the largest sum 6."))),(0,l.kt)("li",{parentName:"ul"},"Example 2:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: nums = ","[1]"),(0,l.kt)("li",{parentName:"ul"},"Output: 1"),(0,l.kt)("li",{parentName:"ul"},"Explanation: The subarray ","[1]"," has the largest sum 1."))),(0,l.kt)("li",{parentName:"ul"},"Example 3:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: nums = ","[5,4,-1,7,8]"),(0,l.kt)("li",{parentName:"ul"},"Output: 23"),(0,l.kt)("li",{parentName:"ul"},"Explanation: The subarray ","[5,4,-1,7,8]"," has the largest sum 23.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"class Solution {\n    // \u5b9a\u4e49\u4e00\u4e2a\u6781\u5c0f\u503c\n    int result = Integer.MIN_VALUE;\n    // \u91c7\u96c6\u5f53\u524d\u8fde\u7eed\u548c\n    int sum = 0;\n    public int maxSubArray(int[] nums) {\n        for(int i = 0; i < nums.length; i ++) {\n            // \u91c7\u96c6\u5f53\u524d\u8fde\u7eed\u548c\n            sum += nums[i];\n            // \u5982\u679c\u5f53\u524d\u8fde\u7eed\u548c\u5927\u4e8eresult\n            // \u8986\u76d6result\n            if(sum > result) result = sum;\n            // \u5982\u679c\u5f53\u524d\u8fde\u7eed\u548c\u5c0f\u4e8e0, \u7f6e0\uff0c\u91cd\u65b0\u7d2f\u52a0\n            // \u4e3a\u4ec0\u4e48\u8fd9\u4e48\u5224\u65ad\uff1f\n            // 1. \u5982\u679c\u6570\u7ec4\u4e2d\u6709\u5927\u4e8e\u7b49\u4e8e0\u7684\u503c\uff0c\u8d1f\u6570\u5c31\u5f97\u7acb\u523b\u653e\u5f03\n            // 2. \u5982\u679c\u6570\u7ec4\u4e2d\u5168\u4e3a\u8d1f\u6570\uff0c\u90a3\u6bd4\u8f83\u7684\u5c31\u662f\u6bcf\u4e00\u4e2a\u503c\n            if(sum < 0) sum = 0;\n        }\n        return result;\n    }\n}\n")),(0,l.kt)("h2",{id:"455-assign-cookies"},"455. Assign Cookies"),(0,l.kt)("p",null,"Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\nEach child i has a greed factor g","[i]",", which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s","[j]",". If s","[j]"," >= g","[i]",", we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 1:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: g = ","[1,2,3]",", s = ","[1,1]"," "),(0,l.kt)("li",{parentName:"ul"},"Output: 1"),(0,l.kt)("li",{parentName:"ul"},"Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content. You need to output 1."))),(0,l.kt)("li",{parentName:"ul"},"Example 2:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: g = ","[1,2]",", s = ","[1,2,3]"," "),(0,l.kt)("li",{parentName:"ul"},"Output: 2"),(0,l.kt)("li",{parentName:"ul"},"Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. You have 3 cookies and their sizes are big enough to gratify all of the children, You need to output 2.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Solution 1"',title:'"Solution','1"':!0},"class Solution {\n    public int findContentChildren(int[] g, int[] s) {\n        // \u6392\u5e8f\u80c3\u53e3\n        Arrays.sort(g);\n        // \u6392\u5e8f\u997c\u5e72\u5927\u5c0f\n        Arrays.sort(s);\n        // \u53ef\u4ee5\u6ee1\u8db3\u7684\u4eba\u6570\n        int result = 0;\n        // \u80c3\u53e3index\n        int gIndex = 0;\n        // \u5faa\u73af\u997c\u5e72\u6570\u7ec4\uff0c\u4ece\u5c0f\u5230\u5927\n        for (int i = 0; i < s.length; i++) {\n            // \u8fb9\u754c1: \u80c3\u53e3index\u4e0d\u80fd\u8d8a\u754c\n            // \u8fb9\u754c2: \u5f53\u524d\u997c\u5e72\u53ef\u4ee5\u6ee1\u8db3\u5f53\u524d\u5c0f\u670b\u53cb\n            if(gIndex < g.length && s[i] >= g[gIndex]) {\n                gIndex ++;// \u7792\u4f4f\u4e86\u80c3\u53e3\uff0c\u80c3\u53e3\u540e\u79fb\u52a8\u4e00\u4f4d\n                result ++;\n            }\n        }\n        return result;\n    }\n}\n")),(0,l.kt)("h2",{id:"solution2"},"Solution2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"class Solution {\n    public int findContentChildren(int[] g, int[] s) {\n        Arrays.sort(g);\n        Arrays.sort(s);\n        int result = 0;\n        int gIndex = 0;\n        int sIndex = 0;\n        while(gIndex < g.length && sIndex < s.length) {\n            // \u997c\u5e72\u80fd\u591f\u6ee1\u8db3\u80c3\u53e3\n            if(s[sIndex] >= g[gIndex]) {\n                // \u540c\u65f6\u540e\u79fb\n                gIndex ++;\n                result ++;\n            }\n            // \u4e0d\u7ba1\u80fd\u4e0d\u80fd\u6ee1\u8db3\uff0c\u997c\u5e72\u7528\u5b8c\u90fd\u5f97\u540e\u79fb\n            sIndex ++;\n        }\n        return result;\n    }\n}\n")),(0,l.kt)("h2",{id:"881-boats-to-save-people"},"881. Boats to Save People"),(0,l.kt)("p",null,"You are given an array people where people","[i]"," is the weight of the i(th) person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.\nReturn the minimum number of boats to carry every given person."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Example 1:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: people = ","[1,2]",", limit = 3"),(0,l.kt)("li",{parentName:"ul"},"Output: 1"),(0,l.kt)("li",{parentName:"ul"},"Explanation: 1 boat (1, 2)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Example 2:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: people = ","[3,2,2,1]",", limit = 3"),(0,l.kt)("li",{parentName:"ul"},"Output: 3"),(0,l.kt)("li",{parentName:"ul"},"Explanation: 3 boats (1, 2), (2) and (3)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Example 3:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: people = ","[3,5,3,4]",", limit = 5"),(0,l.kt)("li",{parentName:"ul"},"Output: 4"),(0,l.kt)("li",{parentName:"ul"},"Explanation: 4 boats (3), (3), (4), (5)")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"class Solution {\n    public int numRescueBoats(int[] people, int limit) {\n        int boats = 0;\n        int left = 0;\n        int right = people.length - 1;\n        // \u6392\u5e8f [3,2,2,1] => [1,2,2,3]\n        Arrays.sort(people);\n        while(left <= right) {\n            // \u5982\u679c\u5de6\u53f3\u76f8\u52a0\u91cd\u91cf\u4e0d\u5927\u4e8elimit\uff0c\u4e00\u8d77\u4e0a\n            if(people[left] + people[right] <= limit){\n                left ++;\n                right --;\n                boats ++;\n            }else { // \u5426\u5219\u91cd\u7684\u5148\u4e0a\n                boats ++;\n                right --;\n            }\n        }\n        return boats;\n    }\n}\n")),(0,l.kt)("h2",{id:"435-non-overlapping-intervals"},"435. Non-overlapping Intervals"),(0,l.kt)("p",null,"Given an array of intervals intervals where intervals","[i]"," = ","[start(i), end(i)]",", return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 1:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: intervals = [","[1,2]",",","[2,3]",",","[3,4]",",","[1,3]","]"),(0,l.kt)("li",{parentName:"ul"},"Output: 1"),(0,l.kt)("li",{parentName:"ul"},"Explanation: ","[1,3]"," can be removed and the rest of the intervals are non-overlapping."))),(0,l.kt)("li",{parentName:"ul"},"Example 2:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: intervals = [","[1,2]",",","[1,2]",",","[1,2]","]"),(0,l.kt)("li",{parentName:"ul"},"Output: 2"),(0,l.kt)("li",{parentName:"ul"},"Explanation: You need to remove two ","[1,2]"," to make the rest of the intervals non-overlapping."))),(0,l.kt)("li",{parentName:"ul"},"Example 3:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: intervals = [","[1,2]",",","[2,3]","]"),(0,l.kt)("li",{parentName:"ul"},"Output: 0"),(0,l.kt)("li",{parentName:"ul"},"Explanation: You don't need to remove any of the intervals since they're already non-overlapping.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"class Solution {\n    public int eraseOverlapIntervals(int[][] intervals) {\n        int count = 0;\n        if(intervals.length <= 1) return 0;\n        // \u8fd9\u91cc\u4e0d\u80fd\u6309\u7167\u533a\u95f4\u5347\u5e8f\u6392\u5e8f\uff0c\u5982\u4e0b\u60c5\u51b5\n        // \u90a3\u4e48\u7b54\u6848\u662f2\uff0c\u663e\u7136\u4e0d\u5bf9\n        // |_________|                 \u533a\u95f4a\n        //   |___|                     \u533a\u95f4b\n        //          |__|               \u533a\u95f4c\n        //                |______|     \u533a\u95f4d\n        // \u6240\u4ee5\u53ea\u80fd\u6309\u7167\u7ed3\u675f\u533a\u95f4\u5347\u5e8f\u6392\u5e8f,\u7b54\u6848\u662f3\n        //   |___|                     \u533a\u95f4b\n        // |_________|                 \u533a\u95f4a\n        //          |__|               \u533a\u95f4c\n        //                |______|     \u533a\u95f4d\n        // \u7b2c\u4e00\u4e2a\u533a\u95f4\u7ed3\u675f\u7684\u8d8a\u65e9\uff0c\u7559\u7ed9\u540e\u9762\u7684\u673a\u4f1a\u8d8a\u591a!!!\n        Arrays.sort(intervals, (a, b) -> a[1] - b[1]);\n        // \u53d6\u7b2c\u4e00\u4e2a\u7684\u7ed3\u675f\u533a\u95f4\n        int end = intervals[0][1];\n        for(int i = 1; i < intervals.length; i++) {\n            int[] arr = intervals[i];\n            if(arr[0] < end) count ++; // \u91cd\u5408\u4e86\uff0c\u5f53\u524d\u533a\u95f4\u9700\u8981\u5220\u9664\uff0c\u8ba1\u6570+1\n            else end = arr[1]; // \u5426\u5219\u4e0d\u91cd\u5408\uff0c\u7ed3\u675f\u533a\u95f4\u540e\u79fb\n        }\n        return count;\n    }\n}\n")),(0,l.kt)("h2",{id:"55-jump-game"},"55. Jump Game"),(0,l.kt)("p",null,"You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Example 1:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: nums = ","[2,3,1,1,4]"),(0,l.kt)("li",{parentName:"ul"},"Output: true"),(0,l.kt)("li",{parentName:"ul"},"Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index."))),(0,l.kt)("li",{parentName:"ul"},"Example 2:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: nums = ","[3,2,1,0,4]"),(0,l.kt)("li",{parentName:"ul"},"Output: false"),(0,l.kt)("li",{parentName:"ul"},"Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"class Solution {\n    public boolean canJump(int[] nums) {\n        // \u5982\u679c\u6570\u7ec4\u4e3a\u7a7a\u6216\u8005\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\n        // \u56e0\u4e3a\u7ea6\u675f\u6761\u4ef6\u662f\u6570\u7ec4\u7684\u503c\u5927\u4e8e\u7b49\u4e8e0\n        // \u6240\u4ee5\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u4e0d\u9700\u8981\u8df3\uff0c\u5c31\u662f\u7ec8\u70b9\n        if(nums.length <= 1) return true;\n        // \u8986\u76d6\u8303\u56f4\n        int cover  = 0;\n        // \u5f00\u59cb\u6269\u5927\u8303\u56f4\n        for(int i = 0; i <= cover; i++) {\n            // \u6bcf\u6b21\u5f53\u524d\u4f4d\u7f6e\u52a0\u4e0a\u4ed6\u7684\u6b65\u957f\uff0c\u83b7\u5f97\u65b0\u7684\u8986\u76d6\u8303\u56f4\n            // \u5982\u679c\u8986\u76d6\u8303\u56f4\u5df2\u7ecf\u5927\u4e8e\u6216\u7b49\u4e8e\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e,\u4ee3\u8868\u80fd\u591f\u5230\u8fbe\n            if(cover >= nums.length - 1) return true;\n            // \u6bcf\u6b21\u5224\u65ad\u53d6\u6700\u5927\u7684\u8986\u76d6\u8303\u56f4\n            cover = Math.max(nums[i] + i, cover);\n        }\n        return false;\n    }\n}\n")),(0,l.kt)("h2",{id:"45-jump-game-ii"},"45. Jump Game II"),(0,l.kt)("p",null,"You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums","[0]",".\nEach element nums","[i]"," represents the maximum length of a forward jump from index i. In other words, if you are at nums","[i]",", you can jump to any nums","[i + j]"," where:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"0 <= j <= nums","[i]"," and"),(0,l.kt)("li",{parentName:"ul"},"i + j < n\nReturn the minimum number of jumps to reach nums","[n - 1]",". The test cases are generated such that you can reach nums","[n - 1]","."),(0,l.kt)("li",{parentName:"ul"},"Example 1:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: nums = ","[2,3,1,1,4]"),(0,l.kt)("li",{parentName:"ul"},"Output: 2"),(0,l.kt)("li",{parentName:"ul"},"Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index."))),(0,l.kt)("li",{parentName:"ul"},"Example 2:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Input: nums = ","[2,3,0,1,4]"),(0,l.kt)("li",{parentName:"ul"},"Output: 2\n",(0,l.kt)("img",{alt:"Locale Dropdown",src:t(7608).Z,width:"1108",height:"697"}))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"class Solution {\n    // \u89e3\u9898\u601d\u8def\uff1a\u6bcf\u6b21\u5728\u53ef\u8df3\u8303\u56f4\u5185\u9009\u62e9\u53ef\u4ee5\u4f7f\u5f97\u8df3\u7684\u66f4\u8fdc\u7684\u4f4d\u7f6e\u3002\n    public int jump(int[] nums) {\n        int times = 0;\n        // \u4ee3\u8868\u80fd\u8df3\u5230\u7684\u6700\u5927\u53f3\u8fb9\u754c\n        int end = 0;\n        // \u5728i~end\u8fb9\u754c\u4e2d\uff0c\u80fd\u8df3\u5230\u7684\u6700\u5927\u4e0b\u6807\n        int maxPos = 0;\n        // \u8fd9\u91cc\u4e3a\u4ec0\u4e48\u662flen - 1?\n        // \u5982\u679c\u5305\u542b\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u8fdb\u5165\u5faa\u73af\uff0c\u5f80\u540e\u54ea\u91cc\u8df3\uff1f\n        for(int i = 0; i < nums.length - 1; i ++) {\n            // \u83b7\u5f97\u5230\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6700\u5927\u8df3\u8dc3\u4f4d\u7f6e\n            maxPos = Math.max(nums[i] + i, maxPos);\n            // \u5982\u679c\u5df2\u7ecf\u53ef\u4ee5\u5230\u8fbe\u6700\u53f3\u8fb9\u754c\uff0c\u76f4\u63a5+1\u8fd4\u56de\n            if(maxPos >= nums.length - 1) return ++ times;\n            // \u5982\u679c\u9047\u5230\u4e86\u8fb9\u754c\uff0c\u5c31\u5f97\u91cd\u65b0\u5b9a\u4e49\u8fb9\u754c\n            if(i == end) {\n                // \u65b0\u7684\u8fb9\u754c\u5c31\u662f\u4e4b\u524d\u83b7\u53d6\u5230\u7684maxPos\n                end = maxPos;\n                times ++;\n            }\n        }\n        return times;\n    }\n}\n")))}c.isMDXComponent=!0},7608:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/6581c5f4-ea7c-4e34-923c-563e20272e7d-aed6489a4d09d57ae847a9420af5d288.png"}}]);