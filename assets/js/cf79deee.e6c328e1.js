"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[577],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,g=p["".concat(i,".").concat(u)]||p[u]||d[u]||o;return n?a.createElement(g,s(s({ref:t},m),{},{components:n})):a.createElement(g,s({ref:t},m))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6033:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},s="Sets, Maps, and their Weak Versions",l={unversionedId:"ES6/Set and Map",id:"ES6/Set and Map",title:"Sets, Maps, and their Weak Versions",description:"Using Set",source:"@site/docs/ES6/11.Set and Map.md",sourceDirName:"ES6",slug:"/ES6/Set and Map",permalink:"/docs/ES6/Set and Map",draft:!1,editUrl:"https://github.com/JonathanTube/jonathantube.github.com/tree/main/docs/ES6/11.Set and Map.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"String and Template",permalink:"/docs/ES6/String and Template"},next:{title:"Algorithm Learning",permalink:"/docs/category/algorithm-learning"}},i={},c=[{value:"Using Set",id:"using-set",level:2},{value:"Iterating Sets",id:"iterating-sets",level:2},{value:"ES6 Maps",id:"es6-maps",level:2},{value:"Iterating Maps",id:"iterating-maps",level:2},{value:"Weak Sets",id:"weak-sets",level:2},{value:"Weak Maps",id:"weak-maps",level:2}],m={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sets-maps-and-their-weak-versions"},"Sets, Maps, and their Weak Versions"),(0,r.kt)("h2",{id:"using-set"},"Using Set"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// initiate\nlet colors = new Set();\n\n// add\ncolors.add( 'red' );\ncolors.add( 'green' );\ncolors.add( 'red' );   // duplicate elements are added only once\nconsole.log( colors ); // Set {\"red\", \"green\"}\n\n// size\nconsole.log( 'Size: ' + colors.size ); // 2\n\n// has\nconsole.log( 'has green: ' + colors.has( 'green' ) + '\\nhas blue: ' + colors.has( 'blue' ) ); // true false\n\n// delete\ncolors.delete( 'green' ) // true\ncolors.delete( 'green' ) // false\n\nlet moreColors = new Set( ['red', 'blue', 'red', 'orange'] );\nconsole.log( moreColors ); // Set { 'red', 'blue', 'orange' }\n")),(0,r.kt)("h2",{id:"iterating-sets"},"Iterating Sets"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let mySet = new Set()\nmySet.add('first')\nmySet.add('second')\n\nmySet.forEach(s=>console.log(s))\n\nfor(let s of mySet) console.log(s)\n\nconsole.log([... mySet])\n")),(0,r.kt)("h2",{id:"es6-maps"},"ES6 Maps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let animal = new Map();\nanimal.set( 8, 'Chocolate' )\nanimal.set( 3, 'Filippone' )\n// also chainable\nanimal.set( 1, 'first' ).set( 2, 'second')\n// Using arrays of key-value pairs works as follows:\nlet newHorses = new Map( [[ 1, 'hello' ], [ 2, 'world' ]] )\n// get size\nconsole.log(animal.size)\n// contains a key?\nconsole.log(animal.has(1))\n// delete item by key\nanimal.delete(1)\n")),(0,r.kt)("h2",{id:"iterating-maps"},"Iterating Maps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// The order in forEach block is value, key\nhorses.forEach( ( value, key ) => console.log( value, key ) )\n// But the order in for of block is key,value\nfor ( let [ key, value ] of horses ) console.log( key, value )\n// spread operators\nconsole.log( [...horses] );\n")),(0,r.kt)("h2",{id:"weak-sets"},"Weak Sets"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Sets and maps hold a reference of their values. This means that the garbage collector won\u2019t be able to collect the values in sets, and key-value pairs in maps to free some memory."),(0,r.kt)("p",{parentName:"admonition"},"This is where weak sets and maps come into play. They only hold weak references to their values, allowing garbage collection of the values while they are members of a set or map.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let firstElement = { order: 1 }, secondElement = { order: 2 }\nlet ws = new WeakSet( [ firstElement, secondElement ] )\n\nconsole.log('has firstElement: '+ws.has( firstElement ))\n//> true\ndelete firstElement;\n// firstElement is removed from the weak set, but the result is still true,\n// because even the reference object was collected by the garbage collection\n// but we still can access this object.\nconsole.log('has firstElement: '+ws.has( firstElement ))\n")),(0,r.kt)("h2",{id:"weak-maps"},"Weak Maps"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Weak maps have object keys, and arbitrary values. When all strong references to a key are removed, the key is garbage collected, and the key-value pair is removed from the weak map."),(0,r.kt)("p",{parentName:"admonition"},"Only the keys of weak maps are weak. Values placed in a weak map have strong references in the map.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let firstElement = { order: 1 }, secondElement = { order: 2 }\nlet wm = new WeakMap()\n\nwm.set( firstElement, 1 )\nwm.set( secondElement, {} )\n\nconsole.log(wm.get( secondElement ))\n//> {}\n \ndelete secondElement\n// secondElement is removed from the weak map\nconsole.log(wm)\n")))}d.isMDXComponent=!0}}]);