"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[404],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=i.createContext({}),s=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(o.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=s(t),c=r,h=d["".concat(o,".").concat(c)]||d[c]||m[c]||a;return t?i.createElement(h,l(l({ref:n},p),{},{components:t})):i.createElement(h,l({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=c;var u={};for(var o in n)hasOwnProperty.call(n,o)&&(u[o]=n[o]);u.originalType=e,u[d]="string"==typeof e?e:r,l[1]=u;for(var s=2;s<a;s++)l[s]=t[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},1267:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>u,toc:()=>s});var i=t(7462),r=(t(7294),t(3905));const a={},l="Queue",u={unversionedId:"leetcode/queue",id:"leetcode/queue",title:"Queue",description:"622. Design Circular Queue",source:"@site/docs/leetcode/3.queue.md",sourceDirName:"leetcode",slug:"/leetcode/queue",permalink:"/docs/leetcode/queue",draft:!1,editUrl:"https://github.com/JonathanTube/jonathantube.github.com/tree/main/docs/leetcode/3.queue.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"linkedList",permalink:"/docs/leetcode/linkedList"},next:{title:"Stack",permalink:"/docs/leetcode/stack"}},o={},s=[{value:"622. Design Circular Queue",id:"622-design-circular-queue",level:2},{value:"1670. Design Front Middle Back Queue",id:"1670-design-front-middle-back-queue",level:2},{value:"239. Sliding Window Maximum",id:"239-sliding-window-maximum",level:2},{value:"99999. Min Heap &amp; Max Heap",id:"99999-min-heap--max-heap",level:2},{value:"703. Kth Largest Element in a Stream",id:"703-kth-largest-element-in-a-stream",level:2},{value:"17.14. Smallest K LCCI",id:"1714-smallest-k-lcci",level:2},{value:"23. Merge k Sorted Lists",id:"23-merge-k-sorted-lists",level:2}],p={toc:s},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"queue"},"Queue"),(0,r.kt)("h2",{id:"622-design-circular-queue"},"622. Design Circular Queue"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},'Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".\nOne of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.\nImplement the MyCircularQueue class:'),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"MyCircularQueue(k) Initializes the object with the size of the queue to be k."),(0,r.kt)("li",{parentName:"ul"},"int Front() Gets the front item from the queue. If the queue is empty, return -1."),(0,r.kt)("li",{parentName:"ul"},"int Rear() Gets the last item from the queue. If the queue is empty, return -1."),(0,r.kt)("li",{parentName:"ul"},"boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful."),(0,r.kt)("li",{parentName:"ul"},"boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful."),(0,r.kt)("li",{parentName:"ul"},"boolean isEmpty() Checks whether the circular queue is empty or not."),(0,r.kt)("li",{parentName:"ul"},"boolean isFull() Checks whether the circular queue is full or not.\nYou must solve the problem without using the built-in queue data structure in your programming language. "))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class MyCircularQueue {\n    private int[] arr;\n    private int capacity;\n    private int head = 0;\n    private int tail = 0;\n\n    public MyCircularQueue(int k) {\n        arr = new int[k];\n        capacity = k;\n    }\n    \n    public boolean enQueue(int value) {\n        if(isFull()) return false;\n        arr[tail % capacity] = value; // \u56e0\u4e3a\u662f\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u8981\u53d6\u4f59\u6570\n        tail ++; // \u961f\u5c3e\u6307\u9488\u540e\u79fb\uff0c\u961f\u5c3e\u6307\u9488\u6307\u5411\u7684\u662f\u961f\u5c3e\u5143\u7d20\u7684\u540e\u4e00\u4e2a\u5143\u7d20\n        return true;\n    }\n    \n    public boolean deQueue() {\n        if(isEmpty()) return false;\n        head ++; // \u51fa\u961f\uff0c\u76f4\u63a5\u5934\u6307\u9488\u540e\u79fb\n        return true;\n    }\n    \n    public int Front() {\n        if(isEmpty()) return -1;\n        return arr[head % capacity];\n    }\n    \n    public int Rear() {\n        if(isEmpty()) return -1;\n        // \u961f\u5c3e\u6307\u9488\u6307\u5411\u7684\u662f\u961f\u5c3e\u7684\u540e\u4e00\u4e2a\u5143\u7d20\n        return arr[(tail - 1) % capacity];\n    }\n    \n    public boolean isEmpty() {\n        // \u5f53\u5934\u5c3e\u76f8\u7b49\u6b63\u5411\u540c\u4e00\u4e2a\uff0c\u8bf4\u660e\u961f\u5217\u4e3a\u7a7a\n        return head == tail;\n    }\n\n    public boolean isFull() {\n        // \u5c3e\u7ed3\u70b9\u4f4d\u7f6e-\u5934\u7ed3\u70b9\u4f4d\u7f6e \u957f\u5ea6 \u7b49\u4e8e \u5bb9\u91cf\n        // \u6ce8\u610ftail\u961f\u5c3e\u6307\u9488\u662f\u6307\u5411\u961f\u5c3e\u5143\u7d20\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\n        // \u5982\u679c\u67094\u4e2a\u5143\u7d20\uff1a[1,2,3,4, null]\uff1b\u4f4d\u7f6e\uff1a5 - 1 = 4\uff1b\u6b63\u597d\u7b49\u4e8e\u961f\u5217\u5bb9\u91cf\n        return tail - head == capacity; \n    }\n}\n")),(0,r.kt)("h1",{id:"933-number-of-recent-calls"},"933. Number of Recent Calls"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You have a RecentCounter class which counts the number of recent requests within a certain time frame.\nImplement the RecentCounter class:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"RecentCounter() Initializes the counter with zero recent requests."),(0,r.kt)("li",{parentName:"ul"},"int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range ","[t - 3000, t]",".\nIt is guaranteed that every call to ping uses a strictly larger value of t than the previous call.\n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},'Example 1:\nInput ["RecentCounter", "ping", "ping", "ping", "ping"] [[], [1], [100], [3001], [3002]]\nOutput [null, 1, 2, 3, 3]\n\nExplanation\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1\nrecentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2\nrecentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3\nrecentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class RecentCounter {\n    Queue<Integer> queue;\n\n    public RecentCounter() {\n        queue = new LinkedList<>();\n    }\n\n    public int ping(int t) {\n        // \u7406\u89e3\u9898\u76ee\u610f\u601d\uff1a\u52a0\u5165\u503c\u540e\uff0c\u6709\u6548\u533a\u95f4\u662f[t-3000, t]\uff1b\n        // \u6240\u4ee5\u9700\u8981\u6dd8\u6c70\u7684\u5c0f\u4e8et-3000\u7684\u6240\u6709\u503c\uff0c\u6240\u4ee5\u5faa\u73af\u6bd4\u8f83\u540e\u51fa\u6808\n        // \u8bb0\u4f4fjava\u91cc\u9762\u7684\u5165\u961f\u5217\u662foffer\uff1b\u800c\u4e0d\u662fenqueue\n        queue.offer(t);\n        int min = t - 3000;\n        // \u8fd9\u91cc\u5343\u4e07\u8bb0\u5f97\uff0c\u5faa\u73af\u51fa\u6808\n        // \u8bb0\u4f4fjava\u91cc\u9762\u7684\u51fa\u961f\u5217\u662fpoll()\uff1b\u800c\u4e0d\u662fdequeue\n        while(queue.peek() < min) queue.poll();\n        return queue.size(); // \u8fd4\u56desize\n    }\n}\n")),(0,r.kt)("h2",{id:"1670-design-front-middle-back-queue"},"1670. Design Front Middle Back Queue"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Design a queue that supports push and pop operations in the front, middle, and back.\nImplement the FrontMiddleBack class:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"FrontMiddleBack() Initializes the queue."),(0,r.kt)("li",{parentName:"ul"},"void pushFront(int val) Adds val to the front of the queue."),(0,r.kt)("li",{parentName:"ul"},"void pushMiddle(int val) Adds val to the middle of the queue."),(0,r.kt)("li",{parentName:"ul"},"void pushBack(int val) Adds val to the back of the queue."),(0,r.kt)("li",{parentName:"ul"},"int popFront() Removes the front element of the queue and returns it. If the queue is empty, return -1."),(0,r.kt)("li",{parentName:"ul"},"int popMiddle() Removes the middle element of the queue and returns it. If the queue is empty, return -1."),(0,r.kt)("li",{parentName:"ul"},"int popBack() Removes the back element of the queue and returns it. If the queue is empty, return -1.\nNotice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:"),(0,r.kt)("li",{parentName:"ul"},"Pushing 6 into the middle of ","[1, 2, 3, 4, 5]"," results in ","[1, 2, 6, 3, 4, 5]","."),(0,r.kt)("li",{parentName:"ul"},"Popping the middle from ","[1, 2, 3, 4, 5, 6]"," returns 3 and results in ","[1, 2, 4, 5, 6]","."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="arrayList\u7248\u672c"',title:'"arrayList\u7248\u672c"'},"class FrontMiddleBackQueue {\n    List<Integer> list; // list\u5b9e\u73b0\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u8fc7\u9ad8\uff0c\u56e0\u4e3a\u8981\u79fb\u52a8\u5143\u7d20\n    public FrontMiddleBackQueue() {\n        list = new ArrayList<>();\n    }\n    \n    public void pushFront(int val) {\n        list.add(0, val);// \u5728list\u5934\u90e8\u63d2\u5165\n    }\n\n    /**\n     * \u5982\u679c\u662f\u5947\u6570[1,2,3] \u63d2\u5165\u4f4d\u7f6e2\uff1b\u4e0b\u68071\n     * \u5982\u679c\u662f\u5076\u6570[1,2,3,4] \u63d2\u5165\u4f4d\u7f6e3\uff1b\u4e0b\u68072\n     * => \u4e00\u4e2a\u5217\u8868\u83b7\u53d6\u4e2d\u95f4\u4f4d\u7f6e\u9760\u540e\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb\u7684\u8bdd\uff0c\u76f4\u63a5\u96642\n     */\n    public void pushMiddle(int val) {\n        // \u5982\u679c\u662f[1,2]\u4e2d\u95f4\u4f4d\u7f6e\u662f 2 - 1 = 1 / 2 = 0\uff0c\u663e\u7136\u4e0d\u5bf9\n        // \u5982\u679c\u662f[1,2,3,4,5]\u4e2d\u95f4\u4f4d\u7f6e\u662f3\uff0c\u4e0b\u6807\u662f2\uff1b\uff085 - 1\uff09= 4 / 2 = 2;\n        // \u5982\u679c\u662f[1,2,3,4,5,6]\u4e2d\u95f4\u4f4d\u7f6e\u662f3\uff0c\u4e0b\u6807\u662f2\uff1a(6 - 1) = 5 / 2 = 2;\n        // \u6240\u4ee5\u4e2d\u95f4\u4f4d\u7f6e\u662f\uff1alist.size() / 2; \n        int pos = list.size() / 2;\n        list.add(pos, val);\n    }\n    \n    public void pushBack(int val) {\n        list.add(val);\n    }\n    \n    public int popFront() {\n        if(list.isEmpty()) return -1;\n        return list.remove(0);\n    }\n    \n    /**\n     * \u5982\u679c\u662f\u5947\u6570[1,2,3] \u5220\u9664\u4f4d\u7f6e2\uff1b\u4e0b\u68071\n     * \u5982\u679c\u662f\u5076\u6570[1,2,3,4] \u5220\u9664\u4f4d\u7f6e2\uff1b\u4e0b\u68071\n     * => \u4e00\u4e2a\u5217\u8868\u83b7\u53d6\u4e2d\u95f4\u8282\u70b9\u9760\u5de6\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb\u7684\u8bdd\uff0c\u76f4\u63a5(len - 1) / 2\n     */\n    public int popMiddle() {\n        if(list.isEmpty()) return -1;\n        int pos = (list.size() - 1) / 2;\n        return list.remove(pos);\n    }\n    \n    public int popBack() {\n        if(list.isEmpty()) return -1;\n        return list.remove(list.size() - 1);\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="\u53cc\u5411\u94fe\u8868\u7248\u672c"',title:'"\u53cc\u5411\u94fe\u8868\u7248\u672c"'},"class FrontMiddleBackQueue {\n   class Node {\n        public int val;\n        public Node next;\n        public Node prev;\n        public Node() {}\n\n        public Node(int val) {\n            this.val = val;\n        }\n    }\n\n    private int size;\n    private Node head;\n    private Node tail;\n    private Node mid;\n\n    public FrontMiddleBackQueue() {\n        head = new Node();\n        tail = new Node();\n        head.next = tail;\n        tail.prev = head;\n        mid = head;\n        size = 0;\n    }\n\n    public void pushFront(int val) {\n        // \u4e2d\u95f4\u8282\u70b9\u4ec0\u4e48\u65f6\u5019\u79fb\u52a8\uff1f\u63d2\u5165\u503c\u4e4b\u540e\n        addNodeBefore(head.next, val);\n        if(size == 1) mid = mid.next; // []\n        // [2,3] => [1,2,3] \u4e0d\u79fb\u52a8\uff1b[2,3,4] => [1,2,3,4] \u524d\u79fb\n        else if(size % 2 == 0) mid = mid.prev;\n    }\n\n    public void pushMiddle(int val) {\n        if(size == 0) { // []\n            addNodeBefore(tail, val);\n            mid = mid.next;\n        } else if(size % 2 == 1) { // [1,2,3]\n            addNodeBefore(mid, val);\n            mid = mid.prev;\n        }else { // [1,2,3,4]\n            addNodeBefore(mid.next,val);\n            mid = mid.next;\n        }\n    }\n\n    public void pushBack(int val) {\n        // \u4e2d\u95f4\u8282\u70b9\u4ec0\u4e48\u65f6\u5019\u79fb\u52a8\uff1f\n        addNodeBefore(tail, val);\n        if(size == 1) mid = head.next;\n        // [1,2] => [1,2,3] \u540e\u79fb; [1,2,3] => [1,2,3,4] \u4e0d\u79fb\n        else if(size % 2 == 1) mid = mid.next;\n    }\n\n    public int popFront() {\n        if(size == 0) return -1;\n        if(size == 1) mid = head;\n        // [1,2,3] => [2,3] \u4e0d\u9700\u8981\u79fb\u52a8 || [1,2,3,4] => [2,3,4] \u540e\u79fb\n        if(size % 2 == 0) mid = mid.next;\n        return removeNode(head.next);\n    }\n\n    public int popMiddle() {\n        if(size == 0) return -1;\n        // [1,2,3] \u79fb\u96642 [1,3]  \u5411\u524d\u79fb\u52a8 || [1,2,3,4] \u79fb\u96643 [1,2,4] \u5411\u540e\u79fb\u52a8\n        Node temp = size % 2 == 1 ? mid.prev : mid.next;\n        int result = removeNode(mid);\n        mid = temp;\n        return result;\n    }\n\n    public int popBack() {\n        if(size == 0) return -1;\n        // [1,2,3] => [1,2] \u5411\u524d\u79fb\u52a8 || [1,2,3,4] => [1,2,3] \u4e0d\u9700\u8981\u79fb\u52a8\n        if(size % 2 == 1) mid = mid.prev;\n        return removeNode(tail.prev);\n    }\n\n    private int removeNode(Node node) {\n        if(size == 0) return -1;\n        Node temp = node.next;\n        node.prev.next = temp;\n        temp.prev = node.prev;\n        node.next = null;\n        node.prev = null;\n        size --;\n        return node.val;\n    }\n\n    /**\n     * \u5728node\u8282\u70b9\u524d\u63d2\u5165\u65b0\u7684node\n     */\n    private void addNodeBefore(Node node, int val) {\n        Node newNode = new Node(val);\n        // \u4fdd\u5b58\u63d2\u5165node\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n        Node prevNode = node.prev;\n        // \u5c06\u65b0\u7684\u8282\u70b9\u4e0e\u5f53\u524d\u8282\u70b9\u5efa\u7acb\u5173\u7cfb\n        newNode.next = node;\n        node.prev = newNode;\n        // \u5c06\u65b0\u7684\u8282\u70b9\u4e0e\u4e4b\u524d\u8282\u70b9\u5efa\u7acb\u5173\u7cfb\n        prevNode.next = newNode;\n        newNode.prev =  prevNode;\n        size ++;\n    }\n}\n")),(0,r.kt)("h2",{id:"239-sliding-window-maximum"},"239. Sliding Window Maximum"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\nReturn the max sliding window."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"Example 1:\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \n\nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class Solution {\n   public int[] maxSlidingWindow(int[] nums, int k) {\n       Deque<Integer> deque = new LinkedList<>();\n       // \u8fd9\u91cc\u4e3a\u4ec0\u4e48\u662flen - k + 1;\n       // \u56e0\u4e3a\u5982\u679c\u662f\uff1b[1,2,3,4],k = 2;\u53ea\u6709[1,2],[2,3],[3,4]\n       // \u51713\u7a97\u53e3 len - k + 1 = 4 - 2 = 1 = 3\n       int[] result = new int[nums.length - k + 1];\n       for(int right = 0; right < nums.length; right++) {\n           // \u5982\u679c\u961f\u5217\u4e0d\u4e3a\u7a7a\uff0c\u5e76\u4e14\u8981\u52a0\u5165\u7684\u5143\u7d20\u6bd4\u961f\u5c3e\u5143\u7d20\u5927\uff0c\u961f\u5c3e\u51fa\u6808\uff0c\n           // \u8fd9\u91cc\u5c31\u662f\u4e3a\u4e86\u4fdd\u6301\u961f\u5217\u4e2d\u5143\u7d20\u5355\u8c03\u9012\u51cf\n           // \u8fd9\u91cc\u5bb9\u6613\u5199\u9519\uff0c\u662f\u6bd4\u8f83\u503c\uff0c\u4e0d\u662f\u4e0b\u6807\n           while(!deque.isEmpty() && nums[right] > nums[deque.peekLast()]) {\n               deque.pollLast();\n           }\n           // \u52a0\u5165\u5143\u7d20\n           deque.offer(right);\n           // \u8ba1\u7b97\u7a97\u53e3\u5de6\u8fb9\u754c\n           int left = right - k + 1;\n           // \u5982\u679c\u961f\u5217\u4e2d\u6700\u5927\u5143\u7d20\u4e0b\u6807\u8d85\u8fc7\u4e86\u7a97\u53e3\u5de6\u8fb9\u754c\uff0c\u961f\u5217\u5934(\u6700\u5927\u5143\u7d20\u4e0b\u6807)\u51fa\u6808\n           if(left > deque.peek()) deque.poll();\n           // \u961f\u5217\u5934\u51fa\u6808\uff0c\u6700\u5927\u503c\u653e\u5165result\u4e2d\uff0c\n           // \u4f46\u662f\u8fd9\u91cc\u9700\u8981\u8df3\u8fc7\u7b2c\u4e00\u4e2a\u7a97\u53e3\u6ca1\u6709\u5f62\u6210\u7684\u60c5\u51b5\n           if(left >= 0) result[left] = nums[deque.peek()];\n       }\n       return result;\n   }\n}\n")),(0,r.kt)("h2",{id:"99999-min-heap--max-heap"},"99999. Min Heap & Max Heap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// \u9ed8\u8ba4\u5c0f\u9876\u5806\nPriorityQueue<Integer> minHeapPq = new PriorityQueue<>();\n\n// \u5b9a\u4e49\u6392\u5e8f\u987a\u5e8f\uff0c\u5927\u9876\u5806\nPriorityQueue<Integer> maxHeapPq = new PriorityQueue<>(Comparator.reverseOrder());\n")),(0,r.kt)("h2",{id:"703-kth-largest-element-in-a-stream"},"703. Kth Largest Element in a Stream"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Design a class to find the k(th) largest element in a stream. Note that it is the k(th) largest element in the sorted order, not the k(th) distinct element.\nImplement KthLargest class:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums."),(0,r.kt)("li",{parentName:"ul"},"int add(int val) Appends the integer val to the stream and returns the element representing the k(th) largest element in the stream.")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},'Example 1:\nInput\n["KthLargest", "add", "add", "add", "add", "add"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\nOutput\n[null, 4, 5, 5, 8, 8]\n\nExplanation\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class KthLargest {\n    private int k;\n    // \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528minHeap?\n    // \u9898\u76ee\u6c42\u5f97\u662f\u7b2cK\u4e2a\u3010\u6700\u5927\u3011\u7684\u5143\u7d20\uff0c\u4e0d\u662f\u7b2cK\u4e2a\u5927\u7684\u5143\u7d20\n    // \u4e5f\u5c31\u662f5,4,3,2,1;\u7b2c3\u4e2a\u6700\u5927\u7684\uff0c\u4e5f\u5c31\u662f3;\u53ea\u80fd\u53d6\u5806\u9876\uff0c\u90a3\u987a\u5e8f\u5fc5\u987b\u662f 3,4,5\n    // \u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528minHeap;\u5806\u9876\u5c31\u662f\u5012\u6570\u7b2cK\u5927\u7684\u5143\u7d20\uff1b\n    private PriorityQueue<Integer> pq = new PriorityQueue<>();\n\n    public KthLargest(int k, int[] nums) {\n        for(int num : nums) pq.offer(num);// \u8fd9\u91cc\u521d\u59cb\u5316\u4e22\u5230\u5806\u91cc\n        this.k = k;\n    }\n    \n    public int add(int val) {\n        pq.offer(val); // add\n        // \u8fd9\u91cc\u8981\u5faa\u73af\u5224\u65ad\uff0c\u8ba9\u5806\u7684\u5927\u5c0f\u7b49\u4e8eK\u7684\u5927\u5c0f\uff0c\u8fd9\u6837\u53d6\u5806\u9876\u5143\u7d20\u624d\u662f\u7b2cK\u4e2a\u6570\n        while(pq.size() > k) pq.poll();\n        return pq.peek(); // \u76f4\u63a5\u53d6\u5806\u9876\n    }\n}\n")),(0,r.kt)("h2",{id:"1714-smallest-k-lcci"},"17.14. Smallest K LCCI"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Design an algorithm to find the smallest K numbers in an array."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"Example:\nInput:  arr = [1,3,5,7,2,4,6,8], k = 4\nOutput:  [1,2,3,4]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="solution 1"',title:'"solution','1"':!0},"class Solution {\n    public int[] getLeastNumbers(int[] arr, int k) {\n        // \u6700\u5c0f\u7684K\u4e2a\u6570\uff0c\u8981\u4fdd\u5b58\uff0c1...K\uff0c\u4f7f\u7528max heap; \n        PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());\n        for(int val : arr) {\n            pq.offer(val);\n            // \u6bcf\u6b21\u52a0\u5165\uff0c\u5982\u679c\u5927\u5c0f\u8d85\u8fc7k\uff0c\u4e22\u5f03\u6389\u6700\u5927\u7684\n            if(pq.size() > k) pq.poll();\n        }\n        int[] result = new int[k];\n        for(int i = 0; i < k; i++)  result[i] = pq.poll();\n        return result;\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="solution 2"',title:'"solution','2"':!0},"class Solution {\n    // \u4f7f\u7528maxHeap\u5168\u90e8\u52a0\u5165\uff0c\u76f4\u63a5\u53d6top k\n    public int[] smallestK(int[] arr, int k) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for(int num : arr) pq.offer(num);\n        int[] result = new int[k];\n        for(int i = 0; i < result.length; i++) {\n            result[i] = pq.poll();\n        }\n        return result;\n    }\n}\n")),(0,r.kt)("h2",{id:"23-merge-k-sorted-lists"},"23. Merge k Sorted Lists"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it. "),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"Example 1:\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are: [ 1->4->5,  1->3->4,  2->6 ]\nmerging them into one sorted list: 1->1->2->3->4->4->5->6\nExample 2:\nInput: lists = []\nOutput: []\nExample 3:\nInput: lists = [[]]\nOutput: []\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        // \u6784\u5efaMinHeap.\n        PriorityQueue<ListNode> pq = new PriorityQueue<>((a,b)-> a.val - b.val);\n        // \u8fd9\u91cc\u539f\u672c\u662f\u5c06\u6240\u6709\u7684\u8282\u70b9\u653e\u5165\uff0c\u4f46\u662f\u9898\u76ee\u662flists\u91cc\u9762\u7684\u6bcf\u4e2a\u94fe\u8868\u662f\u6392\u5e8f\u597d\u7684\n        // \u5982\u679c\u5168\u90e8\u653e\u5165\u5806\uff0c\u90a3\u5806\u6bcf\u6b21\u63d2\u5165\u7684\u590d\u6742\u5ea6\u662fO(logN)\uff0c\u6240\u4ee5\u6ca1\u5fc5\u8981\n        // \u53ea\u9700\u8981\u4fdd\u6301\u5806\u7684\u5927\u5c0f\u4e3alists.size();\u6bcf\u6b21\u6bd4\u8f83\u6bcf\u6761\u94fe\u8868\u7684\u5934\u90e8\u5143\u7d20\u5373\u53ef\n        for(ListNode node : lists) {\n            // \u8fd9\u91cc\u6709\u5751\uff0c\u6d4b\u8bd5\u7528\u4f8b\u91cc\uff0c\u6709\u7a7a\u8282\u70b9\n            if(node != null) pq.offer(node);\n        }\n        ListNode head = new ListNode();\n        ListNode tail = head;\n\n        while(!pq.isEmpty()) {\n            ListNode minNode = pq.poll();\n            tail.next = minNode;\n            tail = tail.next; // \u59cb\u7ec8\u6307\u5411\u961f\u5c3e\n            if(minNode.next != null) pq.offer(minNode.next);\n        }\n        return head.next;\n    }\n}\n")))}m.isMDXComponent=!0}}]);