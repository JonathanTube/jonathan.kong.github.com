"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1805],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var a=i.createContext({}),c=function(e){var n=i.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(a.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),g=r,m=p["".concat(a,".").concat(g)]||p[g]||d[g]||o;return t?i.createElement(m,l(l({ref:n},u),{},{components:t})):i.createElement(m,l({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=g;var s={};for(var a in n)hasOwnProperty.call(n,a)&&(s[a]=n[a]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},2310:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=t(7462),r=(t(7294),t(3905));const o={},l=void 0,s={unversionedId:"tailwindcss/Plugins",id:"tailwindcss/Plugins",title:"Plugins",description:"Adding plugin",source:"@site/docs/tailwindcss/9. Plugins.md",sourceDirName:"tailwindcss",slug:"/tailwindcss/Plugins",permalink:"/docs/tailwindcss/Plugins",draft:!1,editUrl:"https://github.com/JonathanTube/Jonathan.Kong.github.com/tree/main/docs/tailwindcss/9. Plugins.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configuration Presets",permalink:"/docs/tailwindcss/Configuration Presets"},next:{title:"vue",permalink:"/docs/vue3/vue"}},a={},c=[{value:"Adding plugin",id:"adding-plugin",level:2},{value:"Using typography plugin",id:"using-typography-plugin",level:2},{value:"Building custom tailwind plugins",id:"building-custom-tailwind-plugins",level:2}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"adding-plugin"},"Adding plugin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="install plugins"',title:'"install','plugins"':!0},"    npm install -D @tailwindcss/typography\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="tailwind.config.js"',title:'"tailwind.config.js"'},"module.exports = {\n  // ...\n  plugins: [\n    require('@tailwindcss/typography')\n  ]\n}\n")),(0,r.kt)("h2",{id:"using-typography-plugin"},"Using typography plugin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="definition"',title:'"definition"'},'    // normal mode\n    <article class="prose">\n        // ...\n    </article>\n\n    // dark mode\n    <article class="prose dark:prose-invert">\n        // ...\n    </article>\n\n    // customize plugin\n    <article class="prose\n                    prose-h1:underline prose-h1:underline-offset-8\n                    prose-h2:first-letter:text-cyan-600\n                    prose-headings:text-cyan-900\n                    prose-lead:text-cyan-600\n                    prose-p:first-line:italic\n                    prose-blockquote:text-cyan-600 prose-blockquote:border-cyan-600 \n                    prose-blockquote:mx-6 prose-figure:mx-6\n                    prose-figcaption:text-center\n                    prose-img:rounded-lg prose-img:drop-shadow-lg\n                    prose-li:marker:text-cyan-600">\n        // ...\n    </article>\n')),(0,r.kt)("h2",{id:"building-custom-tailwind-plugins"},"Building custom tailwind plugins"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="plugins/counters.js"',title:'"plugins/counters.js"'},"const plugin = require('tailwindcss/plugin')\nconst counters = plugin(function ({ addBase, addComponents, theme }) { \n// The addBase() function adds base styles.\n    addBase({\n        'h1': {\n            counterReset: 'level-1'\n        }, \n        'h2': {\n            counterReset: 'level-2'\n        },\n        'h3': {\n            counterReset: 'level-3'\n        },\n        'h2::before, h3::before, h4::before': {\n            color: theme('colors.slate.600')\n        },\n        'h2::before': {\n            counterIncrement: 'level-1',\n            content: 'counter(level-1) \". \"'\n        },\n        'h3::before': {\n            counterIncrement: 'level-2',\n            content: 'counter(level-1) \".\" counter(level-2) \" \"'\n        },\n        'h4::before': {\n            counterIncrement: 'level-3',\n            content: 'counter(level-1) \".\" counter(level-2) \".\" counter(level-3) \" \"'\n        }\n    }),\n// The addComponents() function adds static component styles.\n// The matchComponents() function adds dynamic component styles.\n// The addUtilities() function adds static utility styles.\n    addUtilities({\n        '.collection': {\n            counterReset: 'collection'\n        },\n        '.item::before': {\n            counterIncrement: 'collection',\n            content: 'counters(collection,\".\") \" \"'\n        }\n    })\n// The matchUtilities() function adds dynamic utility styles.\n// The addVariant() function adds custom variants.\n// The theme() function provides access to values in the user\u2019s theme configuration.\n// The config() function provides access to values in the user\u2019s Tailwind configuration.\n// The corePlugins() function checks if a core plugin is enabled.\n// The e() function manually escapes strings meant to be used in class names.\n})\n\nmodule.exports = counters\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="add the plugin into tailwind.config.js"',title:'"add',the:!0,plugin:!0,into:!0,'tailwind.config.js"':!0},"module.exports = {\n    // ...\n    plugins: [\n        require('./plugins/counters')\n    ]\n}\n")))}d.isMDXComponent=!0}}]);